
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model activity
 * 
 */
export type activity = $Result.DefaultSelection<Prisma.$activityPayload>
/**
 * Model attendance
 * 
 */
export type attendance = $Result.DefaultSelection<Prisma.$attendancePayload>
/**
 * Model diploma
 * 
 */
export type diploma = $Result.DefaultSelection<Prisma.$diplomaPayload>
/**
 * Model registration
 * 
 */
export type registration = $Result.DefaultSelection<Prisma.$registrationPayload>
/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model winner
 * 
 */
export type winner = $Result.DefaultSelection<Prisma.$winnerPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const activity_kind: {
  TALLER: 'TALLER',
  COMPETENCIA: 'COMPETENCIA'
};

export type activity_kind = (typeof activity_kind)[keyof typeof activity_kind]


export const user_type: {
  INTERNAL: 'INTERNAL',
  EXTERNAL: 'EXTERNAL'
};

export type user_type = (typeof user_type)[keyof typeof user_type]


export const registration_status: {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CHECKED_IN: 'CHECKED_IN'
};

export type registration_status = (typeof registration_status)[keyof typeof registration_status]

}

export type activity_kind = $Enums.activity_kind

export const activity_kind: typeof $Enums.activity_kind

export type user_type = $Enums.user_type

export const user_type: typeof $Enums.user_type

export type registration_status = $Enums.registration_status

export const registration_status: typeof $Enums.registration_status

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Activities
 * const activities = await prisma.activity.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Activities
   * const activities = await prisma.activity.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.activity`: Exposes CRUD operations for the **activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.activityDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.attendance`: Exposes CRUD operations for the **attendance** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Attendances
    * const attendances = await prisma.attendance.findMany()
    * ```
    */
  get attendance(): Prisma.attendanceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.diploma`: Exposes CRUD operations for the **diploma** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Diplomas
    * const diplomas = await prisma.diploma.findMany()
    * ```
    */
  get diploma(): Prisma.diplomaDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.registration`: Exposes CRUD operations for the **registration** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Registrations
    * const registrations = await prisma.registration.findMany()
    * ```
    */
  get registration(): Prisma.registrationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.winner`: Exposes CRUD operations for the **winner** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Winners
    * const winners = await prisma.winner.findMany()
    * ```
    */
  get winner(): Prisma.winnerDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.15.0
   * Query Engine version: 85179d7826409ee107a6ba334b5e305ae3fba9fb
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    activity: 'activity',
    attendance: 'attendance',
    diploma: 'diploma',
    registration: 'registration',
    user: 'user',
    winner: 'winner'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "activity" | "attendance" | "diploma" | "registration" | "user" | "winner"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      activity: {
        payload: Prisma.$activityPayload<ExtArgs>
        fields: Prisma.activityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.activityFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.activityFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          findFirst: {
            args: Prisma.activityFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.activityFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          findMany: {
            args: Prisma.activityFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload>[]
          }
          create: {
            args: Prisma.activityCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          createMany: {
            args: Prisma.activityCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.activityDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          update: {
            args: Prisma.activityUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          deleteMany: {
            args: Prisma.activityDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.activityUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.activityUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$activityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.activityGroupByArgs<ExtArgs>
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.activityCountArgs<ExtArgs>
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      attendance: {
        payload: Prisma.$attendancePayload<ExtArgs>
        fields: Prisma.attendanceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.attendanceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.attendanceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findFirst: {
            args: Prisma.attendanceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.attendanceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          findMany: {
            args: Prisma.attendanceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>[]
          }
          create: {
            args: Prisma.attendanceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          createMany: {
            args: Prisma.attendanceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.attendanceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          update: {
            args: Prisma.attendanceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          deleteMany: {
            args: Prisma.attendanceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.attendanceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.attendanceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$attendancePayload>
          }
          aggregate: {
            args: Prisma.AttendanceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAttendance>
          }
          groupBy: {
            args: Prisma.attendanceGroupByArgs<ExtArgs>
            result: $Utils.Optional<AttendanceGroupByOutputType>[]
          }
          count: {
            args: Prisma.attendanceCountArgs<ExtArgs>
            result: $Utils.Optional<AttendanceCountAggregateOutputType> | number
          }
        }
      }
      diploma: {
        payload: Prisma.$diplomaPayload<ExtArgs>
        fields: Prisma.diplomaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.diplomaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.diplomaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload>
          }
          findFirst: {
            args: Prisma.diplomaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.diplomaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload>
          }
          findMany: {
            args: Prisma.diplomaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload>[]
          }
          create: {
            args: Prisma.diplomaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload>
          }
          createMany: {
            args: Prisma.diplomaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.diplomaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload>
          }
          update: {
            args: Prisma.diplomaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload>
          }
          deleteMany: {
            args: Prisma.diplomaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.diplomaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.diplomaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$diplomaPayload>
          }
          aggregate: {
            args: Prisma.DiplomaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDiploma>
          }
          groupBy: {
            args: Prisma.diplomaGroupByArgs<ExtArgs>
            result: $Utils.Optional<DiplomaGroupByOutputType>[]
          }
          count: {
            args: Prisma.diplomaCountArgs<ExtArgs>
            result: $Utils.Optional<DiplomaCountAggregateOutputType> | number
          }
        }
      }
      registration: {
        payload: Prisma.$registrationPayload<ExtArgs>
        fields: Prisma.registrationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.registrationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.registrationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload>
          }
          findFirst: {
            args: Prisma.registrationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.registrationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload>
          }
          findMany: {
            args: Prisma.registrationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload>[]
          }
          create: {
            args: Prisma.registrationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload>
          }
          createMany: {
            args: Prisma.registrationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.registrationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload>
          }
          update: {
            args: Prisma.registrationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload>
          }
          deleteMany: {
            args: Prisma.registrationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.registrationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.registrationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$registrationPayload>
          }
          aggregate: {
            args: Prisma.RegistrationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRegistration>
          }
          groupBy: {
            args: Prisma.registrationGroupByArgs<ExtArgs>
            result: $Utils.Optional<RegistrationGroupByOutputType>[]
          }
          count: {
            args: Prisma.registrationCountArgs<ExtArgs>
            result: $Utils.Optional<RegistrationCountAggregateOutputType> | number
          }
        }
      }
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      winner: {
        payload: Prisma.$winnerPayload<ExtArgs>
        fields: Prisma.winnerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.winnerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.winnerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload>
          }
          findFirst: {
            args: Prisma.winnerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.winnerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload>
          }
          findMany: {
            args: Prisma.winnerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload>[]
          }
          create: {
            args: Prisma.winnerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload>
          }
          createMany: {
            args: Prisma.winnerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.winnerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload>
          }
          update: {
            args: Prisma.winnerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload>
          }
          deleteMany: {
            args: Prisma.winnerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.winnerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.winnerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$winnerPayload>
          }
          aggregate: {
            args: Prisma.WinnerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWinner>
          }
          groupBy: {
            args: Prisma.winnerGroupByArgs<ExtArgs>
            result: $Utils.Optional<WinnerGroupByOutputType>[]
          }
          count: {
            args: Prisma.winnerCountArgs<ExtArgs>
            result: $Utils.Optional<WinnerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    activity?: activityOmit
    attendance?: attendanceOmit
    diploma?: diplomaOmit
    registration?: registrationOmit
    user?: userOmit
    winner?: winnerOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ActivityCountOutputType
   */

  export type ActivityCountOutputType = {
    registration: number
  }

  export type ActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registration?: boolean | ActivityCountOutputTypeCountRegistrationArgs
  }

  // Custom InputTypes
  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCountOutputType
     */
    select?: ActivityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountRegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    registration: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registration?: boolean | UserCountOutputTypeCountRegistrationArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountRegistrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationWhereInput
  }


  /**
   * Models
   */

  /**
   * Model activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    id: number | null
    capacity: number | null
  }

  export type ActivitySumAggregateOutputType = {
    id: number | null
    capacity: number | null
  }

  export type ActivityMinAggregateOutputType = {
    id: number | null
    kind: $Enums.activity_kind | null
    title: string | null
    description: string | null
    date: Date | null
    capacity: number | null
    createdAt: Date | null
  }

  export type ActivityMaxAggregateOutputType = {
    id: number | null
    kind: $Enums.activity_kind | null
    title: string | null
    description: string | null
    date: Date | null
    capacity: number | null
    createdAt: Date | null
  }

  export type ActivityCountAggregateOutputType = {
    id: number
    kind: number
    title: number
    description: number
    date: number
    capacity: number
    createdAt: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type ActivitySumAggregateInputType = {
    id?: true
    capacity?: true
  }

  export type ActivityMinAggregateInputType = {
    id?: true
    kind?: true
    title?: true
    description?: true
    date?: true
    capacity?: true
    createdAt?: true
  }

  export type ActivityMaxAggregateInputType = {
    id?: true
    kind?: true
    title?: true
    description?: true
    date?: true
    capacity?: true
    createdAt?: true
  }

  export type ActivityCountAggregateInputType = {
    id?: true
    kind?: true
    title?: true
    description?: true
    date?: true
    capacity?: true
    createdAt?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which activity to aggregate.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationInput | activityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type activityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: activityWhereInput
    orderBy?: activityOrderByWithAggregationInput | activityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: activityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    id: number
    kind: $Enums.activity_kind
    title: string
    description: string | null
    date: Date
    capacity: number
    createdAt: Date
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends activityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type activitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    kind?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    capacity?: boolean
    createdAt?: boolean
    registration?: boolean | activity$registrationArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>



  export type activitySelectScalar = {
    id?: boolean
    kind?: boolean
    title?: boolean
    description?: boolean
    date?: boolean
    capacity?: boolean
    createdAt?: boolean
  }

  export type activityOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "kind" | "title" | "description" | "date" | "capacity" | "createdAt", ExtArgs["result"]["activity"]>
  export type activityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registration?: boolean | activity$registrationArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $activityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "activity"
    objects: {
      registration: Prisma.$registrationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      kind: $Enums.activity_kind
      title: string
      description: string | null
      date: Date
      capacity: number
      createdAt: Date
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }

  type activityGetPayload<S extends boolean | null | undefined | activityDefaultArgs> = $Result.GetResult<Prisma.$activityPayload, S>

  type activityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<activityFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface activityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['activity'], meta: { name: 'activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {activityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends activityFindUniqueArgs>(args: SelectSubset<T, activityFindUniqueArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Activity that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {activityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends activityFindUniqueOrThrowArgs>(args: SelectSubset<T, activityFindUniqueOrThrowArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends activityFindFirstArgs>(args?: SelectSubset<T, activityFindFirstArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends activityFindFirstOrThrowArgs>(args?: SelectSubset<T, activityFindFirstOrThrowArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const activityWithIdOnly = await prisma.activity.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends activityFindManyArgs>(args?: SelectSubset<T, activityFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Activity.
     * @param {activityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
     */
    create<T extends activityCreateArgs>(args: SelectSubset<T, activityCreateArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Activities.
     * @param {activityCreateManyArgs} args - Arguments to create many Activities.
     * @example
     * // Create many Activities
     * const activity = await prisma.activity.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends activityCreateManyArgs>(args?: SelectSubset<T, activityCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Activity.
     * @param {activityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
     */
    delete<T extends activityDeleteArgs>(args: SelectSubset<T, activityDeleteArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Activity.
     * @param {activityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends activityUpdateArgs>(args: SelectSubset<T, activityUpdateArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Activities.
     * @param {activityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends activityDeleteManyArgs>(args?: SelectSubset<T, activityDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends activityUpdateManyArgs>(args: SelectSubset<T, activityUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {activityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
     */
    upsert<T extends activityUpsertArgs>(args: SelectSubset<T, activityUpsertArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends activityCountArgs>(
      args?: Subset<T, activityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {activityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends activityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: activityGroupByArgs['orderBy'] }
        : { orderBy?: activityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, activityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the activity model
   */
  readonly fields: activityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__activityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registration<T extends activity$registrationArgs<ExtArgs> = {}>(args?: Subset<T, activity$registrationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the activity model
   */
  interface activityFieldRefs {
    readonly id: FieldRef<"activity", 'Int'>
    readonly kind: FieldRef<"activity", 'activity_kind'>
    readonly title: FieldRef<"activity", 'String'>
    readonly description: FieldRef<"activity", 'String'>
    readonly date: FieldRef<"activity", 'DateTime'>
    readonly capacity: FieldRef<"activity", 'Int'>
    readonly createdAt: FieldRef<"activity", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * activity findUnique
   */
  export type activityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where: activityWhereUniqueInput
  }

  /**
   * activity findUniqueOrThrow
   */
  export type activityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where: activityWhereUniqueInput
  }

  /**
   * activity findFirst
   */
  export type activityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationInput | activityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activities.
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * activity findFirstOrThrow
   */
  export type activityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * Filter, which activity to fetch.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationInput | activityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for activities.
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * activity findMany
   */
  export type activityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * Filter, which activities to fetch.
     */
    where?: activityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of activities to fetch.
     */
    orderBy?: activityOrderByWithRelationInput | activityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing activities.
     */
    cursor?: activityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }

  /**
   * activity create
   */
  export type activityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * The data needed to create a activity.
     */
    data: XOR<activityCreateInput, activityUncheckedCreateInput>
  }

  /**
   * activity createMany
   */
  export type activityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many activities.
     */
    data: activityCreateManyInput | activityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * activity update
   */
  export type activityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * The data needed to update a activity.
     */
    data: XOR<activityUpdateInput, activityUncheckedUpdateInput>
    /**
     * Choose, which activity to update.
     */
    where: activityWhereUniqueInput
  }

  /**
   * activity updateMany
   */
  export type activityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update activities.
     */
    data: XOR<activityUpdateManyMutationInput, activityUncheckedUpdateManyInput>
    /**
     * Filter which activities to update
     */
    where?: activityWhereInput
    /**
     * Limit how many activities to update.
     */
    limit?: number
  }

  /**
   * activity upsert
   */
  export type activityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * The filter to search for the activity to update in case it exists.
     */
    where: activityWhereUniqueInput
    /**
     * In case the activity found by the `where` argument doesn't exist, create a new activity with this data.
     */
    create: XOR<activityCreateInput, activityUncheckedCreateInput>
    /**
     * In case the activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<activityUpdateInput, activityUncheckedUpdateInput>
  }

  /**
   * activity delete
   */
  export type activityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
    /**
     * Filter which activity to delete.
     */
    where: activityWhereUniqueInput
  }

  /**
   * activity deleteMany
   */
  export type activityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which activities to delete
     */
    where?: activityWhereInput
    /**
     * Limit how many activities to delete.
     */
    limit?: number
  }

  /**
   * activity.registration
   */
  export type activity$registrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    where?: registrationWhereInput
    orderBy?: registrationOrderByWithRelationInput | registrationOrderByWithRelationInput[]
    cursor?: registrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * activity without action
   */
  export type activityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the activity
     */
    select?: activitySelect<ExtArgs> | null
    /**
     * Omit specific fields from the activity
     */
    omit?: activityOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: activityInclude<ExtArgs> | null
  }


  /**
   * Model attendance
   */

  export type AggregateAttendance = {
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  export type AttendanceAvgAggregateOutputType = {
    id: number | null
    registrationId: number | null
  }

  export type AttendanceSumAggregateOutputType = {
    id: number | null
    registrationId: number | null
  }

  export type AttendanceMinAggregateOutputType = {
    id: number | null
    registrationId: number | null
    checkinAt: Date | null
  }

  export type AttendanceMaxAggregateOutputType = {
    id: number | null
    registrationId: number | null
    checkinAt: Date | null
  }

  export type AttendanceCountAggregateOutputType = {
    id: number
    registrationId: number
    checkinAt: number
    _all: number
  }


  export type AttendanceAvgAggregateInputType = {
    id?: true
    registrationId?: true
  }

  export type AttendanceSumAggregateInputType = {
    id?: true
    registrationId?: true
  }

  export type AttendanceMinAggregateInputType = {
    id?: true
    registrationId?: true
    checkinAt?: true
  }

  export type AttendanceMaxAggregateInputType = {
    id?: true
    registrationId?: true
    checkinAt?: true
  }

  export type AttendanceCountAggregateInputType = {
    id?: true
    registrationId?: true
    checkinAt?: true
    _all?: true
  }

  export type AttendanceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendance to aggregate.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned attendances
    **/
    _count?: true | AttendanceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AttendanceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AttendanceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AttendanceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AttendanceMaxAggregateInputType
  }

  export type GetAttendanceAggregateType<T extends AttendanceAggregateArgs> = {
        [P in keyof T & keyof AggregateAttendance]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAttendance[P]>
      : GetScalarType<T[P], AggregateAttendance[P]>
  }




  export type attendanceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: attendanceWhereInput
    orderBy?: attendanceOrderByWithAggregationInput | attendanceOrderByWithAggregationInput[]
    by: AttendanceScalarFieldEnum[] | AttendanceScalarFieldEnum
    having?: attendanceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AttendanceCountAggregateInputType | true
    _avg?: AttendanceAvgAggregateInputType
    _sum?: AttendanceSumAggregateInputType
    _min?: AttendanceMinAggregateInputType
    _max?: AttendanceMaxAggregateInputType
  }

  export type AttendanceGroupByOutputType = {
    id: number
    registrationId: number
    checkinAt: Date
    _count: AttendanceCountAggregateOutputType | null
    _avg: AttendanceAvgAggregateOutputType | null
    _sum: AttendanceSumAggregateOutputType | null
    _min: AttendanceMinAggregateOutputType | null
    _max: AttendanceMaxAggregateOutputType | null
  }

  type GetAttendanceGroupByPayload<T extends attendanceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AttendanceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AttendanceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
            : GetScalarType<T[P], AttendanceGroupByOutputType[P]>
        }
      >
    >


  export type attendanceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    registrationId?: boolean
    checkinAt?: boolean
    registration?: boolean | registrationDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["attendance"]>



  export type attendanceSelectScalar = {
    id?: boolean
    registrationId?: boolean
    checkinAt?: boolean
  }

  export type attendanceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "registrationId" | "checkinAt", ExtArgs["result"]["attendance"]>
  export type attendanceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registration?: boolean | registrationDefaultArgs<ExtArgs>
  }

  export type $attendancePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "attendance"
    objects: {
      registration: Prisma.$registrationPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      registrationId: number
      checkinAt: Date
    }, ExtArgs["result"]["attendance"]>
    composites: {}
  }

  type attendanceGetPayload<S extends boolean | null | undefined | attendanceDefaultArgs> = $Result.GetResult<Prisma.$attendancePayload, S>

  type attendanceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<attendanceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: AttendanceCountAggregateInputType | true
    }

  export interface attendanceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['attendance'], meta: { name: 'attendance' } }
    /**
     * Find zero or one Attendance that matches the filter.
     * @param {attendanceFindUniqueArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends attendanceFindUniqueArgs>(args: SelectSubset<T, attendanceFindUniqueArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Attendance that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {attendanceFindUniqueOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends attendanceFindUniqueOrThrowArgs>(args: SelectSubset<T, attendanceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends attendanceFindFirstArgs>(args?: SelectSubset<T, attendanceFindFirstArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Attendance that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindFirstOrThrowArgs} args - Arguments to find a Attendance
     * @example
     * // Get one Attendance
     * const attendance = await prisma.attendance.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends attendanceFindFirstOrThrowArgs>(args?: SelectSubset<T, attendanceFindFirstOrThrowArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Attendances that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Attendances
     * const attendances = await prisma.attendance.findMany()
     * 
     * // Get first 10 Attendances
     * const attendances = await prisma.attendance.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const attendanceWithIdOnly = await prisma.attendance.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends attendanceFindManyArgs>(args?: SelectSubset<T, attendanceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Attendance.
     * @param {attendanceCreateArgs} args - Arguments to create a Attendance.
     * @example
     * // Create one Attendance
     * const Attendance = await prisma.attendance.create({
     *   data: {
     *     // ... data to create a Attendance
     *   }
     * })
     * 
     */
    create<T extends attendanceCreateArgs>(args: SelectSubset<T, attendanceCreateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Attendances.
     * @param {attendanceCreateManyArgs} args - Arguments to create many Attendances.
     * @example
     * // Create many Attendances
     * const attendance = await prisma.attendance.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends attendanceCreateManyArgs>(args?: SelectSubset<T, attendanceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Attendance.
     * @param {attendanceDeleteArgs} args - Arguments to delete one Attendance.
     * @example
     * // Delete one Attendance
     * const Attendance = await prisma.attendance.delete({
     *   where: {
     *     // ... filter to delete one Attendance
     *   }
     * })
     * 
     */
    delete<T extends attendanceDeleteArgs>(args: SelectSubset<T, attendanceDeleteArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Attendance.
     * @param {attendanceUpdateArgs} args - Arguments to update one Attendance.
     * @example
     * // Update one Attendance
     * const attendance = await prisma.attendance.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends attendanceUpdateArgs>(args: SelectSubset<T, attendanceUpdateArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Attendances.
     * @param {attendanceDeleteManyArgs} args - Arguments to filter Attendances to delete.
     * @example
     * // Delete a few Attendances
     * const { count } = await prisma.attendance.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends attendanceDeleteManyArgs>(args?: SelectSubset<T, attendanceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Attendances
     * const attendance = await prisma.attendance.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends attendanceUpdateManyArgs>(args: SelectSubset<T, attendanceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Attendance.
     * @param {attendanceUpsertArgs} args - Arguments to update or create a Attendance.
     * @example
     * // Update or create a Attendance
     * const attendance = await prisma.attendance.upsert({
     *   create: {
     *     // ... data to create a Attendance
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Attendance we want to update
     *   }
     * })
     */
    upsert<T extends attendanceUpsertArgs>(args: SelectSubset<T, attendanceUpsertArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Attendances.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceCountArgs} args - Arguments to filter Attendances to count.
     * @example
     * // Count the number of Attendances
     * const count = await prisma.attendance.count({
     *   where: {
     *     // ... the filter for the Attendances we want to count
     *   }
     * })
    **/
    count<T extends attendanceCountArgs>(
      args?: Subset<T, attendanceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AttendanceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AttendanceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AttendanceAggregateArgs>(args: Subset<T, AttendanceAggregateArgs>): Prisma.PrismaPromise<GetAttendanceAggregateType<T>>

    /**
     * Group by Attendance.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {attendanceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends attendanceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: attendanceGroupByArgs['orderBy'] }
        : { orderBy?: attendanceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, attendanceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAttendanceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the attendance model
   */
  readonly fields: attendanceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for attendance.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__attendanceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registration<T extends registrationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, registrationDefaultArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the attendance model
   */
  interface attendanceFieldRefs {
    readonly id: FieldRef<"attendance", 'Int'>
    readonly registrationId: FieldRef<"attendance", 'Int'>
    readonly checkinAt: FieldRef<"attendance", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * attendance findUnique
   */
  export type attendanceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findUniqueOrThrow
   */
  export type attendanceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance findFirst
   */
  export type attendanceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findFirstOrThrow
   */
  export type attendanceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendance to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of attendances.
     */
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance findMany
   */
  export type attendanceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter, which attendances to fetch.
     */
    where?: attendanceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of attendances to fetch.
     */
    orderBy?: attendanceOrderByWithRelationInput | attendanceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing attendances.
     */
    cursor?: attendanceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` attendances from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` attendances.
     */
    skip?: number
    distinct?: AttendanceScalarFieldEnum | AttendanceScalarFieldEnum[]
  }

  /**
   * attendance create
   */
  export type attendanceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to create a attendance.
     */
    data: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
  }

  /**
   * attendance createMany
   */
  export type attendanceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many attendances.
     */
    data: attendanceCreateManyInput | attendanceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * attendance update
   */
  export type attendanceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The data needed to update a attendance.
     */
    data: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
    /**
     * Choose, which attendance to update.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance updateMany
   */
  export type attendanceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update attendances.
     */
    data: XOR<attendanceUpdateManyMutationInput, attendanceUncheckedUpdateManyInput>
    /**
     * Filter which attendances to update
     */
    where?: attendanceWhereInput
    /**
     * Limit how many attendances to update.
     */
    limit?: number
  }

  /**
   * attendance upsert
   */
  export type attendanceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * The filter to search for the attendance to update in case it exists.
     */
    where: attendanceWhereUniqueInput
    /**
     * In case the attendance found by the `where` argument doesn't exist, create a new attendance with this data.
     */
    create: XOR<attendanceCreateInput, attendanceUncheckedCreateInput>
    /**
     * In case the attendance was found with the provided `where` argument, update it with this data.
     */
    update: XOR<attendanceUpdateInput, attendanceUncheckedUpdateInput>
  }

  /**
   * attendance delete
   */
  export type attendanceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    /**
     * Filter which attendance to delete.
     */
    where: attendanceWhereUniqueInput
  }

  /**
   * attendance deleteMany
   */
  export type attendanceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which attendances to delete
     */
    where?: attendanceWhereInput
    /**
     * Limit how many attendances to delete.
     */
    limit?: number
  }

  /**
   * attendance without action
   */
  export type attendanceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
  }


  /**
   * Model diploma
   */

  export type AggregateDiploma = {
    _count: DiplomaCountAggregateOutputType | null
    _avg: DiplomaAvgAggregateOutputType | null
    _sum: DiplomaSumAggregateOutputType | null
    _min: DiplomaMinAggregateOutputType | null
    _max: DiplomaMaxAggregateOutputType | null
  }

  export type DiplomaAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
  }

  export type DiplomaSumAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
  }

  export type DiplomaMinAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
    pdfPath: string | null
    createdAt: Date | null
  }

  export type DiplomaMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
    pdfPath: string | null
    createdAt: Date | null
  }

  export type DiplomaCountAggregateOutputType = {
    id: number
    userId: number
    activityId: number
    pdfPath: number
    createdAt: number
    _all: number
  }


  export type DiplomaAvgAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
  }

  export type DiplomaSumAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
  }

  export type DiplomaMinAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    pdfPath?: true
    createdAt?: true
  }

  export type DiplomaMaxAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    pdfPath?: true
    createdAt?: true
  }

  export type DiplomaCountAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    pdfPath?: true
    createdAt?: true
    _all?: true
  }

  export type DiplomaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which diploma to aggregate.
     */
    where?: diplomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diplomas to fetch.
     */
    orderBy?: diplomaOrderByWithRelationInput | diplomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: diplomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diplomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diplomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned diplomas
    **/
    _count?: true | DiplomaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DiplomaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DiplomaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DiplomaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DiplomaMaxAggregateInputType
  }

  export type GetDiplomaAggregateType<T extends DiplomaAggregateArgs> = {
        [P in keyof T & keyof AggregateDiploma]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDiploma[P]>
      : GetScalarType<T[P], AggregateDiploma[P]>
  }




  export type diplomaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: diplomaWhereInput
    orderBy?: diplomaOrderByWithAggregationInput | diplomaOrderByWithAggregationInput[]
    by: DiplomaScalarFieldEnum[] | DiplomaScalarFieldEnum
    having?: diplomaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DiplomaCountAggregateInputType | true
    _avg?: DiplomaAvgAggregateInputType
    _sum?: DiplomaSumAggregateInputType
    _min?: DiplomaMinAggregateInputType
    _max?: DiplomaMaxAggregateInputType
  }

  export type DiplomaGroupByOutputType = {
    id: number
    userId: number
    activityId: number
    pdfPath: string
    createdAt: Date
    _count: DiplomaCountAggregateOutputType | null
    _avg: DiplomaAvgAggregateOutputType | null
    _sum: DiplomaSumAggregateOutputType | null
    _min: DiplomaMinAggregateOutputType | null
    _max: DiplomaMaxAggregateOutputType | null
  }

  type GetDiplomaGroupByPayload<T extends diplomaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DiplomaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DiplomaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DiplomaGroupByOutputType[P]>
            : GetScalarType<T[P], DiplomaGroupByOutputType[P]>
        }
      >
    >


  export type diplomaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    pdfPath?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["diploma"]>



  export type diplomaSelectScalar = {
    id?: boolean
    userId?: boolean
    activityId?: boolean
    pdfPath?: boolean
    createdAt?: boolean
  }

  export type diplomaOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "activityId" | "pdfPath" | "createdAt", ExtArgs["result"]["diploma"]>

  export type $diplomaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "diploma"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      activityId: number
      pdfPath: string
      createdAt: Date
    }, ExtArgs["result"]["diploma"]>
    composites: {}
  }

  type diplomaGetPayload<S extends boolean | null | undefined | diplomaDefaultArgs> = $Result.GetResult<Prisma.$diplomaPayload, S>

  type diplomaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<diplomaFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DiplomaCountAggregateInputType | true
    }

  export interface diplomaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['diploma'], meta: { name: 'diploma' } }
    /**
     * Find zero or one Diploma that matches the filter.
     * @param {diplomaFindUniqueArgs} args - Arguments to find a Diploma
     * @example
     * // Get one Diploma
     * const diploma = await prisma.diploma.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends diplomaFindUniqueArgs>(args: SelectSubset<T, diplomaFindUniqueArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Diploma that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {diplomaFindUniqueOrThrowArgs} args - Arguments to find a Diploma
     * @example
     * // Get one Diploma
     * const diploma = await prisma.diploma.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends diplomaFindUniqueOrThrowArgs>(args: SelectSubset<T, diplomaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Diploma that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diplomaFindFirstArgs} args - Arguments to find a Diploma
     * @example
     * // Get one Diploma
     * const diploma = await prisma.diploma.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends diplomaFindFirstArgs>(args?: SelectSubset<T, diplomaFindFirstArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Diploma that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diplomaFindFirstOrThrowArgs} args - Arguments to find a Diploma
     * @example
     * // Get one Diploma
     * const diploma = await prisma.diploma.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends diplomaFindFirstOrThrowArgs>(args?: SelectSubset<T, diplomaFindFirstOrThrowArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Diplomas that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diplomaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Diplomas
     * const diplomas = await prisma.diploma.findMany()
     * 
     * // Get first 10 Diplomas
     * const diplomas = await prisma.diploma.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const diplomaWithIdOnly = await prisma.diploma.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends diplomaFindManyArgs>(args?: SelectSubset<T, diplomaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Diploma.
     * @param {diplomaCreateArgs} args - Arguments to create a Diploma.
     * @example
     * // Create one Diploma
     * const Diploma = await prisma.diploma.create({
     *   data: {
     *     // ... data to create a Diploma
     *   }
     * })
     * 
     */
    create<T extends diplomaCreateArgs>(args: SelectSubset<T, diplomaCreateArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Diplomas.
     * @param {diplomaCreateManyArgs} args - Arguments to create many Diplomas.
     * @example
     * // Create many Diplomas
     * const diploma = await prisma.diploma.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends diplomaCreateManyArgs>(args?: SelectSubset<T, diplomaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Diploma.
     * @param {diplomaDeleteArgs} args - Arguments to delete one Diploma.
     * @example
     * // Delete one Diploma
     * const Diploma = await prisma.diploma.delete({
     *   where: {
     *     // ... filter to delete one Diploma
     *   }
     * })
     * 
     */
    delete<T extends diplomaDeleteArgs>(args: SelectSubset<T, diplomaDeleteArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Diploma.
     * @param {diplomaUpdateArgs} args - Arguments to update one Diploma.
     * @example
     * // Update one Diploma
     * const diploma = await prisma.diploma.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends diplomaUpdateArgs>(args: SelectSubset<T, diplomaUpdateArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Diplomas.
     * @param {diplomaDeleteManyArgs} args - Arguments to filter Diplomas to delete.
     * @example
     * // Delete a few Diplomas
     * const { count } = await prisma.diploma.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends diplomaDeleteManyArgs>(args?: SelectSubset<T, diplomaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Diplomas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diplomaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Diplomas
     * const diploma = await prisma.diploma.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends diplomaUpdateManyArgs>(args: SelectSubset<T, diplomaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Diploma.
     * @param {diplomaUpsertArgs} args - Arguments to update or create a Diploma.
     * @example
     * // Update or create a Diploma
     * const diploma = await prisma.diploma.upsert({
     *   create: {
     *     // ... data to create a Diploma
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Diploma we want to update
     *   }
     * })
     */
    upsert<T extends diplomaUpsertArgs>(args: SelectSubset<T, diplomaUpsertArgs<ExtArgs>>): Prisma__diplomaClient<$Result.GetResult<Prisma.$diplomaPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Diplomas.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diplomaCountArgs} args - Arguments to filter Diplomas to count.
     * @example
     * // Count the number of Diplomas
     * const count = await prisma.diploma.count({
     *   where: {
     *     // ... the filter for the Diplomas we want to count
     *   }
     * })
    **/
    count<T extends diplomaCountArgs>(
      args?: Subset<T, diplomaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DiplomaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Diploma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DiplomaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DiplomaAggregateArgs>(args: Subset<T, DiplomaAggregateArgs>): Prisma.PrismaPromise<GetDiplomaAggregateType<T>>

    /**
     * Group by Diploma.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {diplomaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends diplomaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: diplomaGroupByArgs['orderBy'] }
        : { orderBy?: diplomaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, diplomaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDiplomaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the diploma model
   */
  readonly fields: diplomaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for diploma.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__diplomaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the diploma model
   */
  interface diplomaFieldRefs {
    readonly id: FieldRef<"diploma", 'Int'>
    readonly userId: FieldRef<"diploma", 'Int'>
    readonly activityId: FieldRef<"diploma", 'Int'>
    readonly pdfPath: FieldRef<"diploma", 'String'>
    readonly createdAt: FieldRef<"diploma", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * diploma findUnique
   */
  export type diplomaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * Filter, which diploma to fetch.
     */
    where: diplomaWhereUniqueInput
  }

  /**
   * diploma findUniqueOrThrow
   */
  export type diplomaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * Filter, which diploma to fetch.
     */
    where: diplomaWhereUniqueInput
  }

  /**
   * diploma findFirst
   */
  export type diplomaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * Filter, which diploma to fetch.
     */
    where?: diplomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diplomas to fetch.
     */
    orderBy?: diplomaOrderByWithRelationInput | diplomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for diplomas.
     */
    cursor?: diplomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diplomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diplomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of diplomas.
     */
    distinct?: DiplomaScalarFieldEnum | DiplomaScalarFieldEnum[]
  }

  /**
   * diploma findFirstOrThrow
   */
  export type diplomaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * Filter, which diploma to fetch.
     */
    where?: diplomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diplomas to fetch.
     */
    orderBy?: diplomaOrderByWithRelationInput | diplomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for diplomas.
     */
    cursor?: diplomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diplomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diplomas.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of diplomas.
     */
    distinct?: DiplomaScalarFieldEnum | DiplomaScalarFieldEnum[]
  }

  /**
   * diploma findMany
   */
  export type diplomaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * Filter, which diplomas to fetch.
     */
    where?: diplomaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of diplomas to fetch.
     */
    orderBy?: diplomaOrderByWithRelationInput | diplomaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing diplomas.
     */
    cursor?: diplomaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` diplomas from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` diplomas.
     */
    skip?: number
    distinct?: DiplomaScalarFieldEnum | DiplomaScalarFieldEnum[]
  }

  /**
   * diploma create
   */
  export type diplomaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * The data needed to create a diploma.
     */
    data: XOR<diplomaCreateInput, diplomaUncheckedCreateInput>
  }

  /**
   * diploma createMany
   */
  export type diplomaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many diplomas.
     */
    data: diplomaCreateManyInput | diplomaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * diploma update
   */
  export type diplomaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * The data needed to update a diploma.
     */
    data: XOR<diplomaUpdateInput, diplomaUncheckedUpdateInput>
    /**
     * Choose, which diploma to update.
     */
    where: diplomaWhereUniqueInput
  }

  /**
   * diploma updateMany
   */
  export type diplomaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update diplomas.
     */
    data: XOR<diplomaUpdateManyMutationInput, diplomaUncheckedUpdateManyInput>
    /**
     * Filter which diplomas to update
     */
    where?: diplomaWhereInput
    /**
     * Limit how many diplomas to update.
     */
    limit?: number
  }

  /**
   * diploma upsert
   */
  export type diplomaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * The filter to search for the diploma to update in case it exists.
     */
    where: diplomaWhereUniqueInput
    /**
     * In case the diploma found by the `where` argument doesn't exist, create a new diploma with this data.
     */
    create: XOR<diplomaCreateInput, diplomaUncheckedCreateInput>
    /**
     * In case the diploma was found with the provided `where` argument, update it with this data.
     */
    update: XOR<diplomaUpdateInput, diplomaUncheckedUpdateInput>
  }

  /**
   * diploma delete
   */
  export type diplomaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
    /**
     * Filter which diploma to delete.
     */
    where: diplomaWhereUniqueInput
  }

  /**
   * diploma deleteMany
   */
  export type diplomaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which diplomas to delete
     */
    where?: diplomaWhereInput
    /**
     * Limit how many diplomas to delete.
     */
    limit?: number
  }

  /**
   * diploma without action
   */
  export type diplomaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the diploma
     */
    select?: diplomaSelect<ExtArgs> | null
    /**
     * Omit specific fields from the diploma
     */
    omit?: diplomaOmit<ExtArgs> | null
  }


  /**
   * Model registration
   */

  export type AggregateRegistration = {
    _count: RegistrationCountAggregateOutputType | null
    _avg: RegistrationAvgAggregateOutputType | null
    _sum: RegistrationSumAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  export type RegistrationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
  }

  export type RegistrationSumAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
  }

  export type RegistrationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
    qrCodePath: string | null
    status: $Enums.registration_status | null
    createdAt: Date | null
  }

  export type RegistrationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    activityId: number | null
    qrCodePath: string | null
    status: $Enums.registration_status | null
    createdAt: Date | null
  }

  export type RegistrationCountAggregateOutputType = {
    id: number
    userId: number
    activityId: number
    qrCodePath: number
    status: number
    createdAt: number
    _all: number
  }


  export type RegistrationAvgAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
  }

  export type RegistrationSumAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
  }

  export type RegistrationMinAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    qrCodePath?: true
    status?: true
    createdAt?: true
  }

  export type RegistrationMaxAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    qrCodePath?: true
    status?: true
    createdAt?: true
  }

  export type RegistrationCountAggregateInputType = {
    id?: true
    userId?: true
    activityId?: true
    qrCodePath?: true
    status?: true
    createdAt?: true
    _all?: true
  }

  export type RegistrationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registration to aggregate.
     */
    where?: registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationOrderByWithRelationInput | registrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned registrations
    **/
    _count?: true | RegistrationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RegistrationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RegistrationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RegistrationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RegistrationMaxAggregateInputType
  }

  export type GetRegistrationAggregateType<T extends RegistrationAggregateArgs> = {
        [P in keyof T & keyof AggregateRegistration]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRegistration[P]>
      : GetScalarType<T[P], AggregateRegistration[P]>
  }




  export type registrationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: registrationWhereInput
    orderBy?: registrationOrderByWithAggregationInput | registrationOrderByWithAggregationInput[]
    by: RegistrationScalarFieldEnum[] | RegistrationScalarFieldEnum
    having?: registrationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RegistrationCountAggregateInputType | true
    _avg?: RegistrationAvgAggregateInputType
    _sum?: RegistrationSumAggregateInputType
    _min?: RegistrationMinAggregateInputType
    _max?: RegistrationMaxAggregateInputType
  }

  export type RegistrationGroupByOutputType = {
    id: number
    userId: number
    activityId: number
    qrCodePath: string | null
    status: $Enums.registration_status
    createdAt: Date
    _count: RegistrationCountAggregateOutputType | null
    _avg: RegistrationAvgAggregateOutputType | null
    _sum: RegistrationSumAggregateOutputType | null
    _min: RegistrationMinAggregateOutputType | null
    _max: RegistrationMaxAggregateOutputType | null
  }

  type GetRegistrationGroupByPayload<T extends registrationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RegistrationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RegistrationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
            : GetScalarType<T[P], RegistrationGroupByOutputType[P]>
        }
      >
    >


  export type registrationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    activityId?: boolean
    qrCodePath?: boolean
    status?: boolean
    createdAt?: boolean
    attendance?: boolean | registration$attendanceArgs<ExtArgs>
    activity?: boolean | activityDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["registration"]>



  export type registrationSelectScalar = {
    id?: boolean
    userId?: boolean
    activityId?: boolean
    qrCodePath?: boolean
    status?: boolean
    createdAt?: boolean
  }

  export type registrationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "activityId" | "qrCodePath" | "status" | "createdAt", ExtArgs["result"]["registration"]>
  export type registrationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    attendance?: boolean | registration$attendanceArgs<ExtArgs>
    activity?: boolean | activityDefaultArgs<ExtArgs>
    user?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $registrationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "registration"
    objects: {
      attendance: Prisma.$attendancePayload<ExtArgs> | null
      activity: Prisma.$activityPayload<ExtArgs>
      user: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      activityId: number
      qrCodePath: string | null
      status: $Enums.registration_status
      createdAt: Date
    }, ExtArgs["result"]["registration"]>
    composites: {}
  }

  type registrationGetPayload<S extends boolean | null | undefined | registrationDefaultArgs> = $Result.GetResult<Prisma.$registrationPayload, S>

  type registrationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<registrationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RegistrationCountAggregateInputType | true
    }

  export interface registrationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['registration'], meta: { name: 'registration' } }
    /**
     * Find zero or one Registration that matches the filter.
     * @param {registrationFindUniqueArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends registrationFindUniqueArgs>(args: SelectSubset<T, registrationFindUniqueArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Registration that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {registrationFindUniqueOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends registrationFindUniqueOrThrowArgs>(args: SelectSubset<T, registrationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registration that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationFindFirstArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends registrationFindFirstArgs>(args?: SelectSubset<T, registrationFindFirstArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Registration that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationFindFirstOrThrowArgs} args - Arguments to find a Registration
     * @example
     * // Get one Registration
     * const registration = await prisma.registration.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends registrationFindFirstOrThrowArgs>(args?: SelectSubset<T, registrationFindFirstOrThrowArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Registrations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Registrations
     * const registrations = await prisma.registration.findMany()
     * 
     * // Get first 10 Registrations
     * const registrations = await prisma.registration.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const registrationWithIdOnly = await prisma.registration.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends registrationFindManyArgs>(args?: SelectSubset<T, registrationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Registration.
     * @param {registrationCreateArgs} args - Arguments to create a Registration.
     * @example
     * // Create one Registration
     * const Registration = await prisma.registration.create({
     *   data: {
     *     // ... data to create a Registration
     *   }
     * })
     * 
     */
    create<T extends registrationCreateArgs>(args: SelectSubset<T, registrationCreateArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Registrations.
     * @param {registrationCreateManyArgs} args - Arguments to create many Registrations.
     * @example
     * // Create many Registrations
     * const registration = await prisma.registration.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends registrationCreateManyArgs>(args?: SelectSubset<T, registrationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Registration.
     * @param {registrationDeleteArgs} args - Arguments to delete one Registration.
     * @example
     * // Delete one Registration
     * const Registration = await prisma.registration.delete({
     *   where: {
     *     // ... filter to delete one Registration
     *   }
     * })
     * 
     */
    delete<T extends registrationDeleteArgs>(args: SelectSubset<T, registrationDeleteArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Registration.
     * @param {registrationUpdateArgs} args - Arguments to update one Registration.
     * @example
     * // Update one Registration
     * const registration = await prisma.registration.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends registrationUpdateArgs>(args: SelectSubset<T, registrationUpdateArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Registrations.
     * @param {registrationDeleteManyArgs} args - Arguments to filter Registrations to delete.
     * @example
     * // Delete a few Registrations
     * const { count } = await prisma.registration.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends registrationDeleteManyArgs>(args?: SelectSubset<T, registrationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Registrations
     * const registration = await prisma.registration.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends registrationUpdateManyArgs>(args: SelectSubset<T, registrationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Registration.
     * @param {registrationUpsertArgs} args - Arguments to update or create a Registration.
     * @example
     * // Update or create a Registration
     * const registration = await prisma.registration.upsert({
     *   create: {
     *     // ... data to create a Registration
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Registration we want to update
     *   }
     * })
     */
    upsert<T extends registrationUpsertArgs>(args: SelectSubset<T, registrationUpsertArgs<ExtArgs>>): Prisma__registrationClient<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Registrations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationCountArgs} args - Arguments to filter Registrations to count.
     * @example
     * // Count the number of Registrations
     * const count = await prisma.registration.count({
     *   where: {
     *     // ... the filter for the Registrations we want to count
     *   }
     * })
    **/
    count<T extends registrationCountArgs>(
      args?: Subset<T, registrationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RegistrationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RegistrationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RegistrationAggregateArgs>(args: Subset<T, RegistrationAggregateArgs>): Prisma.PrismaPromise<GetRegistrationAggregateType<T>>

    /**
     * Group by Registration.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {registrationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends registrationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: registrationGroupByArgs['orderBy'] }
        : { orderBy?: registrationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, registrationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRegistrationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the registration model
   */
  readonly fields: registrationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for registration.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__registrationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    attendance<T extends registration$attendanceArgs<ExtArgs> = {}>(args?: Subset<T, registration$attendanceArgs<ExtArgs>>): Prisma__attendanceClient<$Result.GetResult<Prisma.$attendancePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    activity<T extends activityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, activityDefaultArgs<ExtArgs>>): Prisma__activityClient<$Result.GetResult<Prisma.$activityPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the registration model
   */
  interface registrationFieldRefs {
    readonly id: FieldRef<"registration", 'Int'>
    readonly userId: FieldRef<"registration", 'Int'>
    readonly activityId: FieldRef<"registration", 'Int'>
    readonly qrCodePath: FieldRef<"registration", 'String'>
    readonly status: FieldRef<"registration", 'registration_status'>
    readonly createdAt: FieldRef<"registration", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * registration findUnique
   */
  export type registrationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * Filter, which registration to fetch.
     */
    where: registrationWhereUniqueInput
  }

  /**
   * registration findUniqueOrThrow
   */
  export type registrationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * Filter, which registration to fetch.
     */
    where: registrationWhereUniqueInput
  }

  /**
   * registration findFirst
   */
  export type registrationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * Filter, which registration to fetch.
     */
    where?: registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationOrderByWithRelationInput | registrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registrations.
     */
    cursor?: registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * registration findFirstOrThrow
   */
  export type registrationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * Filter, which registration to fetch.
     */
    where?: registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationOrderByWithRelationInput | registrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for registrations.
     */
    cursor?: registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of registrations.
     */
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * registration findMany
   */
  export type registrationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * Filter, which registrations to fetch.
     */
    where?: registrationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of registrations to fetch.
     */
    orderBy?: registrationOrderByWithRelationInput | registrationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing registrations.
     */
    cursor?: registrationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` registrations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` registrations.
     */
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * registration create
   */
  export type registrationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * The data needed to create a registration.
     */
    data: XOR<registrationCreateInput, registrationUncheckedCreateInput>
  }

  /**
   * registration createMany
   */
  export type registrationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many registrations.
     */
    data: registrationCreateManyInput | registrationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * registration update
   */
  export type registrationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * The data needed to update a registration.
     */
    data: XOR<registrationUpdateInput, registrationUncheckedUpdateInput>
    /**
     * Choose, which registration to update.
     */
    where: registrationWhereUniqueInput
  }

  /**
   * registration updateMany
   */
  export type registrationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update registrations.
     */
    data: XOR<registrationUpdateManyMutationInput, registrationUncheckedUpdateManyInput>
    /**
     * Filter which registrations to update
     */
    where?: registrationWhereInput
    /**
     * Limit how many registrations to update.
     */
    limit?: number
  }

  /**
   * registration upsert
   */
  export type registrationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * The filter to search for the registration to update in case it exists.
     */
    where: registrationWhereUniqueInput
    /**
     * In case the registration found by the `where` argument doesn't exist, create a new registration with this data.
     */
    create: XOR<registrationCreateInput, registrationUncheckedCreateInput>
    /**
     * In case the registration was found with the provided `where` argument, update it with this data.
     */
    update: XOR<registrationUpdateInput, registrationUncheckedUpdateInput>
  }

  /**
   * registration delete
   */
  export type registrationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    /**
     * Filter which registration to delete.
     */
    where: registrationWhereUniqueInput
  }

  /**
   * registration deleteMany
   */
  export type registrationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which registrations to delete
     */
    where?: registrationWhereInput
    /**
     * Limit how many registrations to delete.
     */
    limit?: number
  }

  /**
   * registration.attendance
   */
  export type registration$attendanceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the attendance
     */
    select?: attendanceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the attendance
     */
    omit?: attendanceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: attendanceInclude<ExtArgs> | null
    where?: attendanceWhereInput
  }

  /**
   * registration without action
   */
  export type registrationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
  }


  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    type: $Enums.user_type | null
    school: string | null
    createdAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    type: $Enums.user_type | null
    school: string | null
    createdAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    type: number
    school: number
    createdAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    type?: true
    school?: true
    createdAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    type?: true
    school?: true
    createdAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    type?: true
    school?: true
    createdAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    type: $Enums.user_type
    school: string | null
    createdAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    type?: boolean
    school?: boolean
    createdAt?: boolean
    registration?: boolean | user$registrationArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>



  export type userSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    type?: boolean
    school?: boolean
    createdAt?: boolean
  }

  export type userOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "email" | "type" | "school" | "createdAt", ExtArgs["result"]["user"]>
  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    registration?: boolean | user$registrationArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      registration: Prisma.$registrationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      type: $Enums.user_type
      school: string | null
      createdAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    registration<T extends user$registrationArgs<ExtArgs> = {}>(args?: Subset<T, user$registrationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$registrationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */
  interface userFieldRefs {
    readonly id: FieldRef<"user", 'Int'>
    readonly name: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly type: FieldRef<"user", 'user_type'>
    readonly school: FieldRef<"user", 'String'>
    readonly createdAt: FieldRef<"user", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
    /**
     * Limit how many users to update.
     */
    limit?: number
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
    /**
     * Limit how many users to delete.
     */
    limit?: number
  }

  /**
   * user.registration
   */
  export type user$registrationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the registration
     */
    select?: registrationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the registration
     */
    omit?: registrationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: registrationInclude<ExtArgs> | null
    where?: registrationWhereInput
    orderBy?: registrationOrderByWithRelationInput | registrationOrderByWithRelationInput[]
    cursor?: registrationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: RegistrationScalarFieldEnum | RegistrationScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Omit specific fields from the user
     */
    omit?: userOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model winner
   */

  export type AggregateWinner = {
    _count: WinnerCountAggregateOutputType | null
    _avg: WinnerAvgAggregateOutputType | null
    _sum: WinnerSumAggregateOutputType | null
    _min: WinnerMinAggregateOutputType | null
    _max: WinnerMaxAggregateOutputType | null
  }

  export type WinnerAvgAggregateOutputType = {
    id: number | null
    activityId: number | null
    userId: number | null
    place: number | null
  }

  export type WinnerSumAggregateOutputType = {
    id: number | null
    activityId: number | null
    userId: number | null
    place: number | null
  }

  export type WinnerMinAggregateOutputType = {
    id: number | null
    activityId: number | null
    userId: number | null
    place: number | null
    description: string | null
    photoUrl: string | null
    createdAt: Date | null
  }

  export type WinnerMaxAggregateOutputType = {
    id: number | null
    activityId: number | null
    userId: number | null
    place: number | null
    description: string | null
    photoUrl: string | null
    createdAt: Date | null
  }

  export type WinnerCountAggregateOutputType = {
    id: number
    activityId: number
    userId: number
    place: number
    description: number
    photoUrl: number
    createdAt: number
    _all: number
  }


  export type WinnerAvgAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    place?: true
  }

  export type WinnerSumAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    place?: true
  }

  export type WinnerMinAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    place?: true
    description?: true
    photoUrl?: true
    createdAt?: true
  }

  export type WinnerMaxAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    place?: true
    description?: true
    photoUrl?: true
    createdAt?: true
  }

  export type WinnerCountAggregateInputType = {
    id?: true
    activityId?: true
    userId?: true
    place?: true
    description?: true
    photoUrl?: true
    createdAt?: true
    _all?: true
  }

  export type WinnerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which winner to aggregate.
     */
    where?: winnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of winners to fetch.
     */
    orderBy?: winnerOrderByWithRelationInput | winnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: winnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` winners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned winners
    **/
    _count?: true | WinnerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WinnerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WinnerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WinnerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WinnerMaxAggregateInputType
  }

  export type GetWinnerAggregateType<T extends WinnerAggregateArgs> = {
        [P in keyof T & keyof AggregateWinner]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWinner[P]>
      : GetScalarType<T[P], AggregateWinner[P]>
  }




  export type winnerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: winnerWhereInput
    orderBy?: winnerOrderByWithAggregationInput | winnerOrderByWithAggregationInput[]
    by: WinnerScalarFieldEnum[] | WinnerScalarFieldEnum
    having?: winnerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WinnerCountAggregateInputType | true
    _avg?: WinnerAvgAggregateInputType
    _sum?: WinnerSumAggregateInputType
    _min?: WinnerMinAggregateInputType
    _max?: WinnerMaxAggregateInputType
  }

  export type WinnerGroupByOutputType = {
    id: number
    activityId: number
    userId: number
    place: number
    description: string | null
    photoUrl: string | null
    createdAt: Date
    _count: WinnerCountAggregateOutputType | null
    _avg: WinnerAvgAggregateOutputType | null
    _sum: WinnerSumAggregateOutputType | null
    _min: WinnerMinAggregateOutputType | null
    _max: WinnerMaxAggregateOutputType | null
  }

  type GetWinnerGroupByPayload<T extends winnerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WinnerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WinnerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WinnerGroupByOutputType[P]>
            : GetScalarType<T[P], WinnerGroupByOutputType[P]>
        }
      >
    >


  export type winnerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    activityId?: boolean
    userId?: boolean
    place?: boolean
    description?: boolean
    photoUrl?: boolean
    createdAt?: boolean
  }, ExtArgs["result"]["winner"]>



  export type winnerSelectScalar = {
    id?: boolean
    activityId?: boolean
    userId?: boolean
    place?: boolean
    description?: boolean
    photoUrl?: boolean
    createdAt?: boolean
  }

  export type winnerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "activityId" | "userId" | "place" | "description" | "photoUrl" | "createdAt", ExtArgs["result"]["winner"]>

  export type $winnerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "winner"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      activityId: number
      userId: number
      place: number
      description: string | null
      photoUrl: string | null
      createdAt: Date
    }, ExtArgs["result"]["winner"]>
    composites: {}
  }

  type winnerGetPayload<S extends boolean | null | undefined | winnerDefaultArgs> = $Result.GetResult<Prisma.$winnerPayload, S>

  type winnerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<winnerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WinnerCountAggregateInputType | true
    }

  export interface winnerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['winner'], meta: { name: 'winner' } }
    /**
     * Find zero or one Winner that matches the filter.
     * @param {winnerFindUniqueArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends winnerFindUniqueArgs>(args: SelectSubset<T, winnerFindUniqueArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Winner that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {winnerFindUniqueOrThrowArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends winnerFindUniqueOrThrowArgs>(args: SelectSubset<T, winnerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Winner that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {winnerFindFirstArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends winnerFindFirstArgs>(args?: SelectSubset<T, winnerFindFirstArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Winner that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {winnerFindFirstOrThrowArgs} args - Arguments to find a Winner
     * @example
     * // Get one Winner
     * const winner = await prisma.winner.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends winnerFindFirstOrThrowArgs>(args?: SelectSubset<T, winnerFindFirstOrThrowArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Winners that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {winnerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Winners
     * const winners = await prisma.winner.findMany()
     * 
     * // Get first 10 Winners
     * const winners = await prisma.winner.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const winnerWithIdOnly = await prisma.winner.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends winnerFindManyArgs>(args?: SelectSubset<T, winnerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Winner.
     * @param {winnerCreateArgs} args - Arguments to create a Winner.
     * @example
     * // Create one Winner
     * const Winner = await prisma.winner.create({
     *   data: {
     *     // ... data to create a Winner
     *   }
     * })
     * 
     */
    create<T extends winnerCreateArgs>(args: SelectSubset<T, winnerCreateArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Winners.
     * @param {winnerCreateManyArgs} args - Arguments to create many Winners.
     * @example
     * // Create many Winners
     * const winner = await prisma.winner.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends winnerCreateManyArgs>(args?: SelectSubset<T, winnerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Winner.
     * @param {winnerDeleteArgs} args - Arguments to delete one Winner.
     * @example
     * // Delete one Winner
     * const Winner = await prisma.winner.delete({
     *   where: {
     *     // ... filter to delete one Winner
     *   }
     * })
     * 
     */
    delete<T extends winnerDeleteArgs>(args: SelectSubset<T, winnerDeleteArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Winner.
     * @param {winnerUpdateArgs} args - Arguments to update one Winner.
     * @example
     * // Update one Winner
     * const winner = await prisma.winner.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends winnerUpdateArgs>(args: SelectSubset<T, winnerUpdateArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Winners.
     * @param {winnerDeleteManyArgs} args - Arguments to filter Winners to delete.
     * @example
     * // Delete a few Winners
     * const { count } = await prisma.winner.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends winnerDeleteManyArgs>(args?: SelectSubset<T, winnerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Winners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {winnerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Winners
     * const winner = await prisma.winner.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends winnerUpdateManyArgs>(args: SelectSubset<T, winnerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Winner.
     * @param {winnerUpsertArgs} args - Arguments to update or create a Winner.
     * @example
     * // Update or create a Winner
     * const winner = await prisma.winner.upsert({
     *   create: {
     *     // ... data to create a Winner
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Winner we want to update
     *   }
     * })
     */
    upsert<T extends winnerUpsertArgs>(args: SelectSubset<T, winnerUpsertArgs<ExtArgs>>): Prisma__winnerClient<$Result.GetResult<Prisma.$winnerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Winners.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {winnerCountArgs} args - Arguments to filter Winners to count.
     * @example
     * // Count the number of Winners
     * const count = await prisma.winner.count({
     *   where: {
     *     // ... the filter for the Winners we want to count
     *   }
     * })
    **/
    count<T extends winnerCountArgs>(
      args?: Subset<T, winnerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WinnerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Winner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WinnerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WinnerAggregateArgs>(args: Subset<T, WinnerAggregateArgs>): Prisma.PrismaPromise<GetWinnerAggregateType<T>>

    /**
     * Group by Winner.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {winnerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends winnerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: winnerGroupByArgs['orderBy'] }
        : { orderBy?: winnerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, winnerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWinnerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the winner model
   */
  readonly fields: winnerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for winner.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__winnerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the winner model
   */
  interface winnerFieldRefs {
    readonly id: FieldRef<"winner", 'Int'>
    readonly activityId: FieldRef<"winner", 'Int'>
    readonly userId: FieldRef<"winner", 'Int'>
    readonly place: FieldRef<"winner", 'Int'>
    readonly description: FieldRef<"winner", 'String'>
    readonly photoUrl: FieldRef<"winner", 'String'>
    readonly createdAt: FieldRef<"winner", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * winner findUnique
   */
  export type winnerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * Filter, which winner to fetch.
     */
    where: winnerWhereUniqueInput
  }

  /**
   * winner findUniqueOrThrow
   */
  export type winnerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * Filter, which winner to fetch.
     */
    where: winnerWhereUniqueInput
  }

  /**
   * winner findFirst
   */
  export type winnerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * Filter, which winner to fetch.
     */
    where?: winnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of winners to fetch.
     */
    orderBy?: winnerOrderByWithRelationInput | winnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for winners.
     */
    cursor?: winnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` winners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of winners.
     */
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * winner findFirstOrThrow
   */
  export type winnerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * Filter, which winner to fetch.
     */
    where?: winnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of winners to fetch.
     */
    orderBy?: winnerOrderByWithRelationInput | winnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for winners.
     */
    cursor?: winnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` winners.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of winners.
     */
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * winner findMany
   */
  export type winnerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * Filter, which winners to fetch.
     */
    where?: winnerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of winners to fetch.
     */
    orderBy?: winnerOrderByWithRelationInput | winnerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing winners.
     */
    cursor?: winnerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` winners from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` winners.
     */
    skip?: number
    distinct?: WinnerScalarFieldEnum | WinnerScalarFieldEnum[]
  }

  /**
   * winner create
   */
  export type winnerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * The data needed to create a winner.
     */
    data: XOR<winnerCreateInput, winnerUncheckedCreateInput>
  }

  /**
   * winner createMany
   */
  export type winnerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many winners.
     */
    data: winnerCreateManyInput | winnerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * winner update
   */
  export type winnerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * The data needed to update a winner.
     */
    data: XOR<winnerUpdateInput, winnerUncheckedUpdateInput>
    /**
     * Choose, which winner to update.
     */
    where: winnerWhereUniqueInput
  }

  /**
   * winner updateMany
   */
  export type winnerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update winners.
     */
    data: XOR<winnerUpdateManyMutationInput, winnerUncheckedUpdateManyInput>
    /**
     * Filter which winners to update
     */
    where?: winnerWhereInput
    /**
     * Limit how many winners to update.
     */
    limit?: number
  }

  /**
   * winner upsert
   */
  export type winnerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * The filter to search for the winner to update in case it exists.
     */
    where: winnerWhereUniqueInput
    /**
     * In case the winner found by the `where` argument doesn't exist, create a new winner with this data.
     */
    create: XOR<winnerCreateInput, winnerUncheckedCreateInput>
    /**
     * In case the winner was found with the provided `where` argument, update it with this data.
     */
    update: XOR<winnerUpdateInput, winnerUncheckedUpdateInput>
  }

  /**
   * winner delete
   */
  export type winnerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
    /**
     * Filter which winner to delete.
     */
    where: winnerWhereUniqueInput
  }

  /**
   * winner deleteMany
   */
  export type winnerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which winners to delete
     */
    where?: winnerWhereInput
    /**
     * Limit how many winners to delete.
     */
    limit?: number
  }

  /**
   * winner without action
   */
  export type winnerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the winner
     */
    select?: winnerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the winner
     */
    omit?: winnerOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ActivityScalarFieldEnum: {
    id: 'id',
    kind: 'kind',
    title: 'title',
    description: 'description',
    date: 'date',
    capacity: 'capacity',
    createdAt: 'createdAt'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const AttendanceScalarFieldEnum: {
    id: 'id',
    registrationId: 'registrationId',
    checkinAt: 'checkinAt'
  };

  export type AttendanceScalarFieldEnum = (typeof AttendanceScalarFieldEnum)[keyof typeof AttendanceScalarFieldEnum]


  export const DiplomaScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    activityId: 'activityId',
    pdfPath: 'pdfPath',
    createdAt: 'createdAt'
  };

  export type DiplomaScalarFieldEnum = (typeof DiplomaScalarFieldEnum)[keyof typeof DiplomaScalarFieldEnum]


  export const RegistrationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    activityId: 'activityId',
    qrCodePath: 'qrCodePath',
    status: 'status',
    createdAt: 'createdAt'
  };

  export type RegistrationScalarFieldEnum = (typeof RegistrationScalarFieldEnum)[keyof typeof RegistrationScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    type: 'type',
    school: 'school',
    createdAt: 'createdAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WinnerScalarFieldEnum: {
    id: 'id',
    activityId: 'activityId',
    userId: 'userId',
    place: 'place',
    description: 'description',
    photoUrl: 'photoUrl',
    createdAt: 'createdAt'
  };

  export type WinnerScalarFieldEnum = (typeof WinnerScalarFieldEnum)[keyof typeof WinnerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const activityOrderByRelevanceFieldEnum: {
    title: 'title',
    description: 'description'
  };

  export type activityOrderByRelevanceFieldEnum = (typeof activityOrderByRelevanceFieldEnum)[keyof typeof activityOrderByRelevanceFieldEnum]


  export const diplomaOrderByRelevanceFieldEnum: {
    pdfPath: 'pdfPath'
  };

  export type diplomaOrderByRelevanceFieldEnum = (typeof diplomaOrderByRelevanceFieldEnum)[keyof typeof diplomaOrderByRelevanceFieldEnum]


  export const registrationOrderByRelevanceFieldEnum: {
    qrCodePath: 'qrCodePath'
  };

  export type registrationOrderByRelevanceFieldEnum = (typeof registrationOrderByRelevanceFieldEnum)[keyof typeof registrationOrderByRelevanceFieldEnum]


  export const userOrderByRelevanceFieldEnum: {
    name: 'name',
    email: 'email',
    school: 'school'
  };

  export type userOrderByRelevanceFieldEnum = (typeof userOrderByRelevanceFieldEnum)[keyof typeof userOrderByRelevanceFieldEnum]


  export const winnerOrderByRelevanceFieldEnum: {
    description: 'description',
    photoUrl: 'photoUrl'
  };

  export type winnerOrderByRelevanceFieldEnum = (typeof winnerOrderByRelevanceFieldEnum)[keyof typeof winnerOrderByRelevanceFieldEnum]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'activity_kind'
   */
  export type Enumactivity_kindFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'activity_kind'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'registration_status'
   */
  export type Enumregistration_statusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'registration_status'>
    


  /**
   * Reference to a field of type 'user_type'
   */
  export type Enumuser_typeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'user_type'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type activityWhereInput = {
    AND?: activityWhereInput | activityWhereInput[]
    OR?: activityWhereInput[]
    NOT?: activityWhereInput | activityWhereInput[]
    id?: IntFilter<"activity"> | number
    kind?: Enumactivity_kindFilter<"activity"> | $Enums.activity_kind
    title?: StringFilter<"activity"> | string
    description?: StringNullableFilter<"activity"> | string | null
    date?: DateTimeFilter<"activity"> | Date | string
    capacity?: IntFilter<"activity"> | number
    createdAt?: DateTimeFilter<"activity"> | Date | string
    registration?: RegistrationListRelationFilter
  }

  export type activityOrderByWithRelationInput = {
    id?: SortOrder
    kind?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    registration?: registrationOrderByRelationAggregateInput
    _relevance?: activityOrderByRelevanceInput
  }

  export type activityWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: activityWhereInput | activityWhereInput[]
    OR?: activityWhereInput[]
    NOT?: activityWhereInput | activityWhereInput[]
    kind?: Enumactivity_kindFilter<"activity"> | $Enums.activity_kind
    title?: StringFilter<"activity"> | string
    description?: StringNullableFilter<"activity"> | string | null
    date?: DateTimeFilter<"activity"> | Date | string
    capacity?: IntFilter<"activity"> | number
    createdAt?: DateTimeFilter<"activity"> | Date | string
    registration?: RegistrationListRelationFilter
  }, "id">

  export type activityOrderByWithAggregationInput = {
    id?: SortOrder
    kind?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    date?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
    _count?: activityCountOrderByAggregateInput
    _avg?: activityAvgOrderByAggregateInput
    _max?: activityMaxOrderByAggregateInput
    _min?: activityMinOrderByAggregateInput
    _sum?: activitySumOrderByAggregateInput
  }

  export type activityScalarWhereWithAggregatesInput = {
    AND?: activityScalarWhereWithAggregatesInput | activityScalarWhereWithAggregatesInput[]
    OR?: activityScalarWhereWithAggregatesInput[]
    NOT?: activityScalarWhereWithAggregatesInput | activityScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"activity"> | number
    kind?: Enumactivity_kindWithAggregatesFilter<"activity"> | $Enums.activity_kind
    title?: StringWithAggregatesFilter<"activity"> | string
    description?: StringNullableWithAggregatesFilter<"activity"> | string | null
    date?: DateTimeWithAggregatesFilter<"activity"> | Date | string
    capacity?: IntWithAggregatesFilter<"activity"> | number
    createdAt?: DateTimeWithAggregatesFilter<"activity"> | Date | string
  }

  export type attendanceWhereInput = {
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    id?: IntFilter<"attendance"> | number
    registrationId?: IntFilter<"attendance"> | number
    checkinAt?: DateTimeFilter<"attendance"> | Date | string
    registration?: XOR<RegistrationScalarRelationFilter, registrationWhereInput>
  }

  export type attendanceOrderByWithRelationInput = {
    id?: SortOrder
    registrationId?: SortOrder
    checkinAt?: SortOrder
    registration?: registrationOrderByWithRelationInput
  }

  export type attendanceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    registrationId?: number
    AND?: attendanceWhereInput | attendanceWhereInput[]
    OR?: attendanceWhereInput[]
    NOT?: attendanceWhereInput | attendanceWhereInput[]
    checkinAt?: DateTimeFilter<"attendance"> | Date | string
    registration?: XOR<RegistrationScalarRelationFilter, registrationWhereInput>
  }, "id" | "registrationId">

  export type attendanceOrderByWithAggregationInput = {
    id?: SortOrder
    registrationId?: SortOrder
    checkinAt?: SortOrder
    _count?: attendanceCountOrderByAggregateInput
    _avg?: attendanceAvgOrderByAggregateInput
    _max?: attendanceMaxOrderByAggregateInput
    _min?: attendanceMinOrderByAggregateInput
    _sum?: attendanceSumOrderByAggregateInput
  }

  export type attendanceScalarWhereWithAggregatesInput = {
    AND?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    OR?: attendanceScalarWhereWithAggregatesInput[]
    NOT?: attendanceScalarWhereWithAggregatesInput | attendanceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"attendance"> | number
    registrationId?: IntWithAggregatesFilter<"attendance"> | number
    checkinAt?: DateTimeWithAggregatesFilter<"attendance"> | Date | string
  }

  export type diplomaWhereInput = {
    AND?: diplomaWhereInput | diplomaWhereInput[]
    OR?: diplomaWhereInput[]
    NOT?: diplomaWhereInput | diplomaWhereInput[]
    id?: IntFilter<"diploma"> | number
    userId?: IntFilter<"diploma"> | number
    activityId?: IntFilter<"diploma"> | number
    pdfPath?: StringFilter<"diploma"> | string
    createdAt?: DateTimeFilter<"diploma"> | Date | string
  }

  export type diplomaOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    pdfPath?: SortOrder
    createdAt?: SortOrder
    _relevance?: diplomaOrderByRelevanceInput
  }

  export type diplomaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: diplomaWhereInput | diplomaWhereInput[]
    OR?: diplomaWhereInput[]
    NOT?: diplomaWhereInput | diplomaWhereInput[]
    userId?: IntFilter<"diploma"> | number
    activityId?: IntFilter<"diploma"> | number
    pdfPath?: StringFilter<"diploma"> | string
    createdAt?: DateTimeFilter<"diploma"> | Date | string
  }, "id">

  export type diplomaOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    pdfPath?: SortOrder
    createdAt?: SortOrder
    _count?: diplomaCountOrderByAggregateInput
    _avg?: diplomaAvgOrderByAggregateInput
    _max?: diplomaMaxOrderByAggregateInput
    _min?: diplomaMinOrderByAggregateInput
    _sum?: diplomaSumOrderByAggregateInput
  }

  export type diplomaScalarWhereWithAggregatesInput = {
    AND?: diplomaScalarWhereWithAggregatesInput | diplomaScalarWhereWithAggregatesInput[]
    OR?: diplomaScalarWhereWithAggregatesInput[]
    NOT?: diplomaScalarWhereWithAggregatesInput | diplomaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"diploma"> | number
    userId?: IntWithAggregatesFilter<"diploma"> | number
    activityId?: IntWithAggregatesFilter<"diploma"> | number
    pdfPath?: StringWithAggregatesFilter<"diploma"> | string
    createdAt?: DateTimeWithAggregatesFilter<"diploma"> | Date | string
  }

  export type registrationWhereInput = {
    AND?: registrationWhereInput | registrationWhereInput[]
    OR?: registrationWhereInput[]
    NOT?: registrationWhereInput | registrationWhereInput[]
    id?: IntFilter<"registration"> | number
    userId?: IntFilter<"registration"> | number
    activityId?: IntFilter<"registration"> | number
    qrCodePath?: StringNullableFilter<"registration"> | string | null
    status?: Enumregistration_statusFilter<"registration"> | $Enums.registration_status
    createdAt?: DateTimeFilter<"registration"> | Date | string
    attendance?: XOR<AttendanceNullableScalarRelationFilter, attendanceWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, activityWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }

  export type registrationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    qrCodePath?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    attendance?: attendanceOrderByWithRelationInput
    activity?: activityOrderByWithRelationInput
    user?: userOrderByWithRelationInput
    _relevance?: registrationOrderByRelevanceInput
  }

  export type registrationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: registrationWhereInput | registrationWhereInput[]
    OR?: registrationWhereInput[]
    NOT?: registrationWhereInput | registrationWhereInput[]
    userId?: IntFilter<"registration"> | number
    activityId?: IntFilter<"registration"> | number
    qrCodePath?: StringNullableFilter<"registration"> | string | null
    status?: Enumregistration_statusFilter<"registration"> | $Enums.registration_status
    createdAt?: DateTimeFilter<"registration"> | Date | string
    attendance?: XOR<AttendanceNullableScalarRelationFilter, attendanceWhereInput> | null
    activity?: XOR<ActivityScalarRelationFilter, activityWhereInput>
    user?: XOR<UserScalarRelationFilter, userWhereInput>
  }, "id">

  export type registrationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    qrCodePath?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    _count?: registrationCountOrderByAggregateInput
    _avg?: registrationAvgOrderByAggregateInput
    _max?: registrationMaxOrderByAggregateInput
    _min?: registrationMinOrderByAggregateInput
    _sum?: registrationSumOrderByAggregateInput
  }

  export type registrationScalarWhereWithAggregatesInput = {
    AND?: registrationScalarWhereWithAggregatesInput | registrationScalarWhereWithAggregatesInput[]
    OR?: registrationScalarWhereWithAggregatesInput[]
    NOT?: registrationScalarWhereWithAggregatesInput | registrationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"registration"> | number
    userId?: IntWithAggregatesFilter<"registration"> | number
    activityId?: IntWithAggregatesFilter<"registration"> | number
    qrCodePath?: StringNullableWithAggregatesFilter<"registration"> | string | null
    status?: Enumregistration_statusWithAggregatesFilter<"registration"> | $Enums.registration_status
    createdAt?: DateTimeWithAggregatesFilter<"registration"> | Date | string
  }

  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    id?: IntFilter<"user"> | number
    name?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    type?: Enumuser_typeFilter<"user"> | $Enums.user_type
    school?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    registration?: RegistrationListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    type?: SortOrder
    school?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    registration?: registrationOrderByRelationAggregateInput
    _relevance?: userOrderByRelevanceInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    name?: StringFilter<"user"> | string
    type?: Enumuser_typeFilter<"user"> | $Enums.user_type
    school?: StringNullableFilter<"user"> | string | null
    createdAt?: DateTimeFilter<"user"> | Date | string
    registration?: RegistrationListRelationFilter
  }, "id" | "email">

  export type userOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    type?: SortOrder
    school?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"user"> | number
    name?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    type?: Enumuser_typeWithAggregatesFilter<"user"> | $Enums.user_type
    school?: StringNullableWithAggregatesFilter<"user"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"user"> | Date | string
  }

  export type winnerWhereInput = {
    AND?: winnerWhereInput | winnerWhereInput[]
    OR?: winnerWhereInput[]
    NOT?: winnerWhereInput | winnerWhereInput[]
    id?: IntFilter<"winner"> | number
    activityId?: IntFilter<"winner"> | number
    userId?: IntFilter<"winner"> | number
    place?: IntFilter<"winner"> | number
    description?: StringNullableFilter<"winner"> | string | null
    photoUrl?: StringNullableFilter<"winner"> | string | null
    createdAt?: DateTimeFilter<"winner"> | Date | string
  }

  export type winnerOrderByWithRelationInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    place?: SortOrder
    description?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _relevance?: winnerOrderByRelevanceInput
  }

  export type winnerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: winnerWhereInput | winnerWhereInput[]
    OR?: winnerWhereInput[]
    NOT?: winnerWhereInput | winnerWhereInput[]
    activityId?: IntFilter<"winner"> | number
    userId?: IntFilter<"winner"> | number
    place?: IntFilter<"winner"> | number
    description?: StringNullableFilter<"winner"> | string | null
    photoUrl?: StringNullableFilter<"winner"> | string | null
    createdAt?: DateTimeFilter<"winner"> | Date | string
  }, "id">

  export type winnerOrderByWithAggregationInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    place?: SortOrder
    description?: SortOrderInput | SortOrder
    photoUrl?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: winnerCountOrderByAggregateInput
    _avg?: winnerAvgOrderByAggregateInput
    _max?: winnerMaxOrderByAggregateInput
    _min?: winnerMinOrderByAggregateInput
    _sum?: winnerSumOrderByAggregateInput
  }

  export type winnerScalarWhereWithAggregatesInput = {
    AND?: winnerScalarWhereWithAggregatesInput | winnerScalarWhereWithAggregatesInput[]
    OR?: winnerScalarWhereWithAggregatesInput[]
    NOT?: winnerScalarWhereWithAggregatesInput | winnerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"winner"> | number
    activityId?: IntWithAggregatesFilter<"winner"> | number
    userId?: IntWithAggregatesFilter<"winner"> | number
    place?: IntWithAggregatesFilter<"winner"> | number
    description?: StringNullableWithAggregatesFilter<"winner"> | string | null
    photoUrl?: StringNullableWithAggregatesFilter<"winner"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"winner"> | Date | string
  }

  export type activityCreateInput = {
    kind: $Enums.activity_kind
    title: string
    description?: string | null
    date: Date | string
    capacity: number
    createdAt?: Date | string
    registration?: registrationCreateNestedManyWithoutActivityInput
  }

  export type activityUncheckedCreateInput = {
    id?: number
    kind: $Enums.activity_kind
    title: string
    description?: string | null
    date: Date | string
    capacity: number
    createdAt?: Date | string
    registration?: registrationUncheckedCreateNestedManyWithoutActivityInput
  }

  export type activityUpdateInput = {
    kind?: Enumactivity_kindFieldUpdateOperationsInput | $Enums.activity_kind
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registration?: registrationUpdateManyWithoutActivityNestedInput
  }

  export type activityUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: Enumactivity_kindFieldUpdateOperationsInput | $Enums.activity_kind
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registration?: registrationUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type activityCreateManyInput = {
    id?: number
    kind: $Enums.activity_kind
    title: string
    description?: string | null
    date: Date | string
    capacity: number
    createdAt?: Date | string
  }

  export type activityUpdateManyMutationInput = {
    kind?: Enumactivity_kindFieldUpdateOperationsInput | $Enums.activity_kind
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type activityUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: Enumactivity_kindFieldUpdateOperationsInput | $Enums.activity_kind
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attendanceCreateInput = {
    checkinAt?: Date | string
    registration: registrationCreateNestedOneWithoutAttendanceInput
  }

  export type attendanceUncheckedCreateInput = {
    id?: number
    registrationId: number
    checkinAt?: Date | string
  }

  export type attendanceUpdateInput = {
    checkinAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registration?: registrationUpdateOneRequiredWithoutAttendanceNestedInput
  }

  export type attendanceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrationId?: IntFieldUpdateOperationsInput | number
    checkinAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attendanceCreateManyInput = {
    id?: number
    registrationId: number
    checkinAt?: Date | string
  }

  export type attendanceUpdateManyMutationInput = {
    checkinAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attendanceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    registrationId?: IntFieldUpdateOperationsInput | number
    checkinAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type diplomaCreateInput = {
    userId: number
    activityId: number
    pdfPath: string
    createdAt?: Date | string
  }

  export type diplomaUncheckedCreateInput = {
    id?: number
    userId: number
    activityId: number
    pdfPath: string
    createdAt?: Date | string
  }

  export type diplomaUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    pdfPath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type diplomaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    pdfPath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type diplomaCreateManyInput = {
    id?: number
    userId: number
    activityId: number
    pdfPath: string
    createdAt?: Date | string
  }

  export type diplomaUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    pdfPath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type diplomaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    pdfPath?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type registrationCreateInput = {
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
    attendance?: attendanceCreateNestedOneWithoutRegistrationInput
    activity: activityCreateNestedOneWithoutRegistrationInput
    user: userCreateNestedOneWithoutRegistrationInput
  }

  export type registrationUncheckedCreateInput = {
    id?: number
    userId: number
    activityId: number
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
    attendance?: attendanceUncheckedCreateNestedOneWithoutRegistrationInput
  }

  export type registrationUpdateInput = {
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: attendanceUpdateOneWithoutRegistrationNestedInput
    activity?: activityUpdateOneRequiredWithoutRegistrationNestedInput
    user?: userUpdateOneRequiredWithoutRegistrationNestedInput
  }

  export type registrationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: attendanceUncheckedUpdateOneWithoutRegistrationNestedInput
  }

  export type registrationCreateManyInput = {
    id?: number
    userId: number
    activityId: number
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
  }

  export type registrationUpdateManyMutationInput = {
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type registrationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userCreateInput = {
    name: string
    email: string
    type: $Enums.user_type
    school?: string | null
    createdAt?: Date | string
    registration?: registrationCreateNestedManyWithoutUserInput
  }

  export type userUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    type: $Enums.user_type
    school?: string | null
    createdAt?: Date | string
    registration?: registrationUncheckedCreateNestedManyWithoutUserInput
  }

  export type userUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: Enumuser_typeFieldUpdateOperationsInput | $Enums.user_type
    school?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registration?: registrationUpdateManyWithoutUserNestedInput
  }

  export type userUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: Enumuser_typeFieldUpdateOperationsInput | $Enums.user_type
    school?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    registration?: registrationUncheckedUpdateManyWithoutUserNestedInput
  }

  export type userCreateManyInput = {
    id?: number
    name: string
    email: string
    type: $Enums.user_type
    school?: string | null
    createdAt?: Date | string
  }

  export type userUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: Enumuser_typeFieldUpdateOperationsInput | $Enums.user_type
    school?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: Enumuser_typeFieldUpdateOperationsInput | $Enums.user_type
    school?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type winnerCreateInput = {
    activityId: number
    userId: number
    place: number
    description?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
  }

  export type winnerUncheckedCreateInput = {
    id?: number
    activityId: number
    userId: number
    place: number
    description?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
  }

  export type winnerUpdateInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    place?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type winnerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    place?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type winnerCreateManyInput = {
    id?: number
    activityId: number
    userId: number
    place: number
    description?: string | null
    photoUrl?: string | null
    createdAt?: Date | string
  }

  export type winnerUpdateManyMutationInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    place?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type winnerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    place?: IntFieldUpdateOperationsInput | number
    description?: NullableStringFieldUpdateOperationsInput | string | null
    photoUrl?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type Enumactivity_kindFilter<$PrismaModel = never> = {
    equals?: $Enums.activity_kind | Enumactivity_kindFieldRefInput<$PrismaModel>
    in?: $Enums.activity_kind[]
    notIn?: $Enums.activity_kind[]
    not?: NestedEnumactivity_kindFilter<$PrismaModel> | $Enums.activity_kind
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type RegistrationListRelationFilter = {
    every?: registrationWhereInput
    some?: registrationWhereInput
    none?: registrationWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type registrationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type activityOrderByRelevanceInput = {
    fields: activityOrderByRelevanceFieldEnum | activityOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type activityCountOrderByAggregateInput = {
    id?: SortOrder
    kind?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
  }

  export type activityAvgOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type activityMaxOrderByAggregateInput = {
    id?: SortOrder
    kind?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
  }

  export type activityMinOrderByAggregateInput = {
    id?: SortOrder
    kind?: SortOrder
    title?: SortOrder
    description?: SortOrder
    date?: SortOrder
    capacity?: SortOrder
    createdAt?: SortOrder
  }

  export type activitySumOrderByAggregateInput = {
    id?: SortOrder
    capacity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type Enumactivity_kindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.activity_kind | Enumactivity_kindFieldRefInput<$PrismaModel>
    in?: $Enums.activity_kind[]
    notIn?: $Enums.activity_kind[]
    not?: NestedEnumactivity_kindWithAggregatesFilter<$PrismaModel> | $Enums.activity_kind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumactivity_kindFilter<$PrismaModel>
    _max?: NestedEnumactivity_kindFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type RegistrationScalarRelationFilter = {
    is?: registrationWhereInput
    isNot?: registrationWhereInput
  }

  export type attendanceCountOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
    checkinAt?: SortOrder
  }

  export type attendanceAvgOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
  }

  export type attendanceMaxOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
    checkinAt?: SortOrder
  }

  export type attendanceMinOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
    checkinAt?: SortOrder
  }

  export type attendanceSumOrderByAggregateInput = {
    id?: SortOrder
    registrationId?: SortOrder
  }

  export type diplomaOrderByRelevanceInput = {
    fields: diplomaOrderByRelevanceFieldEnum | diplomaOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type diplomaCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    pdfPath?: SortOrder
    createdAt?: SortOrder
  }

  export type diplomaAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type diplomaMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    pdfPath?: SortOrder
    createdAt?: SortOrder
  }

  export type diplomaMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    pdfPath?: SortOrder
    createdAt?: SortOrder
  }

  export type diplomaSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type Enumregistration_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.registration_status | Enumregistration_statusFieldRefInput<$PrismaModel>
    in?: $Enums.registration_status[]
    notIn?: $Enums.registration_status[]
    not?: NestedEnumregistration_statusFilter<$PrismaModel> | $Enums.registration_status
  }

  export type AttendanceNullableScalarRelationFilter = {
    is?: attendanceWhereInput | null
    isNot?: attendanceWhereInput | null
  }

  export type ActivityScalarRelationFilter = {
    is?: activityWhereInput
    isNot?: activityWhereInput
  }

  export type UserScalarRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type registrationOrderByRelevanceInput = {
    fields: registrationOrderByRelevanceFieldEnum | registrationOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type registrationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    qrCodePath?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type registrationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type registrationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    qrCodePath?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type registrationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
    qrCodePath?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
  }

  export type registrationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    activityId?: SortOrder
  }

  export type Enumregistration_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.registration_status | Enumregistration_statusFieldRefInput<$PrismaModel>
    in?: $Enums.registration_status[]
    notIn?: $Enums.registration_status[]
    not?: NestedEnumregistration_statusWithAggregatesFilter<$PrismaModel> | $Enums.registration_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumregistration_statusFilter<$PrismaModel>
    _max?: NestedEnumregistration_statusFilter<$PrismaModel>
  }

  export type Enumuser_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.user_type | Enumuser_typeFieldRefInput<$PrismaModel>
    in?: $Enums.user_type[]
    notIn?: $Enums.user_type[]
    not?: NestedEnumuser_typeFilter<$PrismaModel> | $Enums.user_type
  }

  export type userOrderByRelevanceInput = {
    fields: userOrderByRelevanceFieldEnum | userOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type userCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    type?: SortOrder
    school?: SortOrder
    createdAt?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    type?: SortOrder
    school?: SortOrder
    createdAt?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    type?: SortOrder
    school?: SortOrder
    createdAt?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type Enumuser_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_type | Enumuser_typeFieldRefInput<$PrismaModel>
    in?: $Enums.user_type[]
    notIn?: $Enums.user_type[]
    not?: NestedEnumuser_typeWithAggregatesFilter<$PrismaModel> | $Enums.user_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_typeFilter<$PrismaModel>
    _max?: NestedEnumuser_typeFilter<$PrismaModel>
  }

  export type winnerOrderByRelevanceInput = {
    fields: winnerOrderByRelevanceFieldEnum | winnerOrderByRelevanceFieldEnum[]
    sort: SortOrder
    search: string
  }

  export type winnerCountOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    place?: SortOrder
    description?: SortOrder
    photoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type winnerAvgOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    place?: SortOrder
  }

  export type winnerMaxOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    place?: SortOrder
    description?: SortOrder
    photoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type winnerMinOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    place?: SortOrder
    description?: SortOrder
    photoUrl?: SortOrder
    createdAt?: SortOrder
  }

  export type winnerSumOrderByAggregateInput = {
    id?: SortOrder
    activityId?: SortOrder
    userId?: SortOrder
    place?: SortOrder
  }

  export type registrationCreateNestedManyWithoutActivityInput = {
    create?: XOR<registrationCreateWithoutActivityInput, registrationUncheckedCreateWithoutActivityInput> | registrationCreateWithoutActivityInput[] | registrationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutActivityInput | registrationCreateOrConnectWithoutActivityInput[]
    createMany?: registrationCreateManyActivityInputEnvelope
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
  }

  export type registrationUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<registrationCreateWithoutActivityInput, registrationUncheckedCreateWithoutActivityInput> | registrationCreateWithoutActivityInput[] | registrationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutActivityInput | registrationCreateOrConnectWithoutActivityInput[]
    createMany?: registrationCreateManyActivityInputEnvelope
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
  }

  export type Enumactivity_kindFieldUpdateOperationsInput = {
    set?: $Enums.activity_kind
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type registrationUpdateManyWithoutActivityNestedInput = {
    create?: XOR<registrationCreateWithoutActivityInput, registrationUncheckedCreateWithoutActivityInput> | registrationCreateWithoutActivityInput[] | registrationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutActivityInput | registrationCreateOrConnectWithoutActivityInput[]
    upsert?: registrationUpsertWithWhereUniqueWithoutActivityInput | registrationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: registrationCreateManyActivityInputEnvelope
    set?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    disconnect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    delete?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    update?: registrationUpdateWithWhereUniqueWithoutActivityInput | registrationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: registrationUpdateManyWithWhereWithoutActivityInput | registrationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: registrationScalarWhereInput | registrationScalarWhereInput[]
  }

  export type registrationUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<registrationCreateWithoutActivityInput, registrationUncheckedCreateWithoutActivityInput> | registrationCreateWithoutActivityInput[] | registrationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutActivityInput | registrationCreateOrConnectWithoutActivityInput[]
    upsert?: registrationUpsertWithWhereUniqueWithoutActivityInput | registrationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: registrationCreateManyActivityInputEnvelope
    set?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    disconnect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    delete?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    update?: registrationUpdateWithWhereUniqueWithoutActivityInput | registrationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: registrationUpdateManyWithWhereWithoutActivityInput | registrationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: registrationScalarWhereInput | registrationScalarWhereInput[]
  }

  export type registrationCreateNestedOneWithoutAttendanceInput = {
    create?: XOR<registrationCreateWithoutAttendanceInput, registrationUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: registrationCreateOrConnectWithoutAttendanceInput
    connect?: registrationWhereUniqueInput
  }

  export type registrationUpdateOneRequiredWithoutAttendanceNestedInput = {
    create?: XOR<registrationCreateWithoutAttendanceInput, registrationUncheckedCreateWithoutAttendanceInput>
    connectOrCreate?: registrationCreateOrConnectWithoutAttendanceInput
    upsert?: registrationUpsertWithoutAttendanceInput
    connect?: registrationWhereUniqueInput
    update?: XOR<XOR<registrationUpdateToOneWithWhereWithoutAttendanceInput, registrationUpdateWithoutAttendanceInput>, registrationUncheckedUpdateWithoutAttendanceInput>
  }

  export type attendanceCreateNestedOneWithoutRegistrationInput = {
    create?: XOR<attendanceCreateWithoutRegistrationInput, attendanceUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: attendanceCreateOrConnectWithoutRegistrationInput
    connect?: attendanceWhereUniqueInput
  }

  export type activityCreateNestedOneWithoutRegistrationInput = {
    create?: XOR<activityCreateWithoutRegistrationInput, activityUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: activityCreateOrConnectWithoutRegistrationInput
    connect?: activityWhereUniqueInput
  }

  export type userCreateNestedOneWithoutRegistrationInput = {
    create?: XOR<userCreateWithoutRegistrationInput, userUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: userCreateOrConnectWithoutRegistrationInput
    connect?: userWhereUniqueInput
  }

  export type attendanceUncheckedCreateNestedOneWithoutRegistrationInput = {
    create?: XOR<attendanceCreateWithoutRegistrationInput, attendanceUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: attendanceCreateOrConnectWithoutRegistrationInput
    connect?: attendanceWhereUniqueInput
  }

  export type Enumregistration_statusFieldUpdateOperationsInput = {
    set?: $Enums.registration_status
  }

  export type attendanceUpdateOneWithoutRegistrationNestedInput = {
    create?: XOR<attendanceCreateWithoutRegistrationInput, attendanceUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: attendanceCreateOrConnectWithoutRegistrationInput
    upsert?: attendanceUpsertWithoutRegistrationInput
    disconnect?: attendanceWhereInput | boolean
    delete?: attendanceWhereInput | boolean
    connect?: attendanceWhereUniqueInput
    update?: XOR<XOR<attendanceUpdateToOneWithWhereWithoutRegistrationInput, attendanceUpdateWithoutRegistrationInput>, attendanceUncheckedUpdateWithoutRegistrationInput>
  }

  export type activityUpdateOneRequiredWithoutRegistrationNestedInput = {
    create?: XOR<activityCreateWithoutRegistrationInput, activityUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: activityCreateOrConnectWithoutRegistrationInput
    upsert?: activityUpsertWithoutRegistrationInput
    connect?: activityWhereUniqueInput
    update?: XOR<XOR<activityUpdateToOneWithWhereWithoutRegistrationInput, activityUpdateWithoutRegistrationInput>, activityUncheckedUpdateWithoutRegistrationInput>
  }

  export type userUpdateOneRequiredWithoutRegistrationNestedInput = {
    create?: XOR<userCreateWithoutRegistrationInput, userUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: userCreateOrConnectWithoutRegistrationInput
    upsert?: userUpsertWithoutRegistrationInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutRegistrationInput, userUpdateWithoutRegistrationInput>, userUncheckedUpdateWithoutRegistrationInput>
  }

  export type attendanceUncheckedUpdateOneWithoutRegistrationNestedInput = {
    create?: XOR<attendanceCreateWithoutRegistrationInput, attendanceUncheckedCreateWithoutRegistrationInput>
    connectOrCreate?: attendanceCreateOrConnectWithoutRegistrationInput
    upsert?: attendanceUpsertWithoutRegistrationInput
    disconnect?: attendanceWhereInput | boolean
    delete?: attendanceWhereInput | boolean
    connect?: attendanceWhereUniqueInput
    update?: XOR<XOR<attendanceUpdateToOneWithWhereWithoutRegistrationInput, attendanceUpdateWithoutRegistrationInput>, attendanceUncheckedUpdateWithoutRegistrationInput>
  }

  export type registrationCreateNestedManyWithoutUserInput = {
    create?: XOR<registrationCreateWithoutUserInput, registrationUncheckedCreateWithoutUserInput> | registrationCreateWithoutUserInput[] | registrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutUserInput | registrationCreateOrConnectWithoutUserInput[]
    createMany?: registrationCreateManyUserInputEnvelope
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
  }

  export type registrationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<registrationCreateWithoutUserInput, registrationUncheckedCreateWithoutUserInput> | registrationCreateWithoutUserInput[] | registrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutUserInput | registrationCreateOrConnectWithoutUserInput[]
    createMany?: registrationCreateManyUserInputEnvelope
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
  }

  export type Enumuser_typeFieldUpdateOperationsInput = {
    set?: $Enums.user_type
  }

  export type registrationUpdateManyWithoutUserNestedInput = {
    create?: XOR<registrationCreateWithoutUserInput, registrationUncheckedCreateWithoutUserInput> | registrationCreateWithoutUserInput[] | registrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutUserInput | registrationCreateOrConnectWithoutUserInput[]
    upsert?: registrationUpsertWithWhereUniqueWithoutUserInput | registrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: registrationCreateManyUserInputEnvelope
    set?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    disconnect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    delete?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    update?: registrationUpdateWithWhereUniqueWithoutUserInput | registrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: registrationUpdateManyWithWhereWithoutUserInput | registrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: registrationScalarWhereInput | registrationScalarWhereInput[]
  }

  export type registrationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<registrationCreateWithoutUserInput, registrationUncheckedCreateWithoutUserInput> | registrationCreateWithoutUserInput[] | registrationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: registrationCreateOrConnectWithoutUserInput | registrationCreateOrConnectWithoutUserInput[]
    upsert?: registrationUpsertWithWhereUniqueWithoutUserInput | registrationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: registrationCreateManyUserInputEnvelope
    set?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    disconnect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    delete?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    connect?: registrationWhereUniqueInput | registrationWhereUniqueInput[]
    update?: registrationUpdateWithWhereUniqueWithoutUserInput | registrationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: registrationUpdateManyWithWhereWithoutUserInput | registrationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: registrationScalarWhereInput | registrationScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumactivity_kindFilter<$PrismaModel = never> = {
    equals?: $Enums.activity_kind | Enumactivity_kindFieldRefInput<$PrismaModel>
    in?: $Enums.activity_kind[]
    notIn?: $Enums.activity_kind[]
    not?: NestedEnumactivity_kindFilter<$PrismaModel> | $Enums.activity_kind
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumactivity_kindWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.activity_kind | Enumactivity_kindFieldRefInput<$PrismaModel>
    in?: $Enums.activity_kind[]
    notIn?: $Enums.activity_kind[]
    not?: NestedEnumactivity_kindWithAggregatesFilter<$PrismaModel> | $Enums.activity_kind
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumactivity_kindFilter<$PrismaModel>
    _max?: NestedEnumactivity_kindFilter<$PrismaModel>
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    search?: string
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumregistration_statusFilter<$PrismaModel = never> = {
    equals?: $Enums.registration_status | Enumregistration_statusFieldRefInput<$PrismaModel>
    in?: $Enums.registration_status[]
    notIn?: $Enums.registration_status[]
    not?: NestedEnumregistration_statusFilter<$PrismaModel> | $Enums.registration_status
  }

  export type NestedEnumregistration_statusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.registration_status | Enumregistration_statusFieldRefInput<$PrismaModel>
    in?: $Enums.registration_status[]
    notIn?: $Enums.registration_status[]
    not?: NestedEnumregistration_statusWithAggregatesFilter<$PrismaModel> | $Enums.registration_status
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumregistration_statusFilter<$PrismaModel>
    _max?: NestedEnumregistration_statusFilter<$PrismaModel>
  }

  export type NestedEnumuser_typeFilter<$PrismaModel = never> = {
    equals?: $Enums.user_type | Enumuser_typeFieldRefInput<$PrismaModel>
    in?: $Enums.user_type[]
    notIn?: $Enums.user_type[]
    not?: NestedEnumuser_typeFilter<$PrismaModel> | $Enums.user_type
  }

  export type NestedEnumuser_typeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.user_type | Enumuser_typeFieldRefInput<$PrismaModel>
    in?: $Enums.user_type[]
    notIn?: $Enums.user_type[]
    not?: NestedEnumuser_typeWithAggregatesFilter<$PrismaModel> | $Enums.user_type
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumuser_typeFilter<$PrismaModel>
    _max?: NestedEnumuser_typeFilter<$PrismaModel>
  }

  export type registrationCreateWithoutActivityInput = {
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
    attendance?: attendanceCreateNestedOneWithoutRegistrationInput
    user: userCreateNestedOneWithoutRegistrationInput
  }

  export type registrationUncheckedCreateWithoutActivityInput = {
    id?: number
    userId: number
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
    attendance?: attendanceUncheckedCreateNestedOneWithoutRegistrationInput
  }

  export type registrationCreateOrConnectWithoutActivityInput = {
    where: registrationWhereUniqueInput
    create: XOR<registrationCreateWithoutActivityInput, registrationUncheckedCreateWithoutActivityInput>
  }

  export type registrationCreateManyActivityInputEnvelope = {
    data: registrationCreateManyActivityInput | registrationCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type registrationUpsertWithWhereUniqueWithoutActivityInput = {
    where: registrationWhereUniqueInput
    update: XOR<registrationUpdateWithoutActivityInput, registrationUncheckedUpdateWithoutActivityInput>
    create: XOR<registrationCreateWithoutActivityInput, registrationUncheckedCreateWithoutActivityInput>
  }

  export type registrationUpdateWithWhereUniqueWithoutActivityInput = {
    where: registrationWhereUniqueInput
    data: XOR<registrationUpdateWithoutActivityInput, registrationUncheckedUpdateWithoutActivityInput>
  }

  export type registrationUpdateManyWithWhereWithoutActivityInput = {
    where: registrationScalarWhereInput
    data: XOR<registrationUpdateManyMutationInput, registrationUncheckedUpdateManyWithoutActivityInput>
  }

  export type registrationScalarWhereInput = {
    AND?: registrationScalarWhereInput | registrationScalarWhereInput[]
    OR?: registrationScalarWhereInput[]
    NOT?: registrationScalarWhereInput | registrationScalarWhereInput[]
    id?: IntFilter<"registration"> | number
    userId?: IntFilter<"registration"> | number
    activityId?: IntFilter<"registration"> | number
    qrCodePath?: StringNullableFilter<"registration"> | string | null
    status?: Enumregistration_statusFilter<"registration"> | $Enums.registration_status
    createdAt?: DateTimeFilter<"registration"> | Date | string
  }

  export type registrationCreateWithoutAttendanceInput = {
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
    activity: activityCreateNestedOneWithoutRegistrationInput
    user: userCreateNestedOneWithoutRegistrationInput
  }

  export type registrationUncheckedCreateWithoutAttendanceInput = {
    id?: number
    userId: number
    activityId: number
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
  }

  export type registrationCreateOrConnectWithoutAttendanceInput = {
    where: registrationWhereUniqueInput
    create: XOR<registrationCreateWithoutAttendanceInput, registrationUncheckedCreateWithoutAttendanceInput>
  }

  export type registrationUpsertWithoutAttendanceInput = {
    update: XOR<registrationUpdateWithoutAttendanceInput, registrationUncheckedUpdateWithoutAttendanceInput>
    create: XOR<registrationCreateWithoutAttendanceInput, registrationUncheckedCreateWithoutAttendanceInput>
    where?: registrationWhereInput
  }

  export type registrationUpdateToOneWithWhereWithoutAttendanceInput = {
    where?: registrationWhereInput
    data: XOR<registrationUpdateWithoutAttendanceInput, registrationUncheckedUpdateWithoutAttendanceInput>
  }

  export type registrationUpdateWithoutAttendanceInput = {
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: activityUpdateOneRequiredWithoutRegistrationNestedInput
    user?: userUpdateOneRequiredWithoutRegistrationNestedInput
  }

  export type registrationUncheckedUpdateWithoutAttendanceInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attendanceCreateWithoutRegistrationInput = {
    checkinAt?: Date | string
  }

  export type attendanceUncheckedCreateWithoutRegistrationInput = {
    id?: number
    checkinAt?: Date | string
  }

  export type attendanceCreateOrConnectWithoutRegistrationInput = {
    where: attendanceWhereUniqueInput
    create: XOR<attendanceCreateWithoutRegistrationInput, attendanceUncheckedCreateWithoutRegistrationInput>
  }

  export type activityCreateWithoutRegistrationInput = {
    kind: $Enums.activity_kind
    title: string
    description?: string | null
    date: Date | string
    capacity: number
    createdAt?: Date | string
  }

  export type activityUncheckedCreateWithoutRegistrationInput = {
    id?: number
    kind: $Enums.activity_kind
    title: string
    description?: string | null
    date: Date | string
    capacity: number
    createdAt?: Date | string
  }

  export type activityCreateOrConnectWithoutRegistrationInput = {
    where: activityWhereUniqueInput
    create: XOR<activityCreateWithoutRegistrationInput, activityUncheckedCreateWithoutRegistrationInput>
  }

  export type userCreateWithoutRegistrationInput = {
    name: string
    email: string
    type: $Enums.user_type
    school?: string | null
    createdAt?: Date | string
  }

  export type userUncheckedCreateWithoutRegistrationInput = {
    id?: number
    name: string
    email: string
    type: $Enums.user_type
    school?: string | null
    createdAt?: Date | string
  }

  export type userCreateOrConnectWithoutRegistrationInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutRegistrationInput, userUncheckedCreateWithoutRegistrationInput>
  }

  export type attendanceUpsertWithoutRegistrationInput = {
    update: XOR<attendanceUpdateWithoutRegistrationInput, attendanceUncheckedUpdateWithoutRegistrationInput>
    create: XOR<attendanceCreateWithoutRegistrationInput, attendanceUncheckedCreateWithoutRegistrationInput>
    where?: attendanceWhereInput
  }

  export type attendanceUpdateToOneWithWhereWithoutRegistrationInput = {
    where?: attendanceWhereInput
    data: XOR<attendanceUpdateWithoutRegistrationInput, attendanceUncheckedUpdateWithoutRegistrationInput>
  }

  export type attendanceUpdateWithoutRegistrationInput = {
    checkinAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type attendanceUncheckedUpdateWithoutRegistrationInput = {
    id?: IntFieldUpdateOperationsInput | number
    checkinAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type activityUpsertWithoutRegistrationInput = {
    update: XOR<activityUpdateWithoutRegistrationInput, activityUncheckedUpdateWithoutRegistrationInput>
    create: XOR<activityCreateWithoutRegistrationInput, activityUncheckedCreateWithoutRegistrationInput>
    where?: activityWhereInput
  }

  export type activityUpdateToOneWithWhereWithoutRegistrationInput = {
    where?: activityWhereInput
    data: XOR<activityUpdateWithoutRegistrationInput, activityUncheckedUpdateWithoutRegistrationInput>
  }

  export type activityUpdateWithoutRegistrationInput = {
    kind?: Enumactivity_kindFieldUpdateOperationsInput | $Enums.activity_kind
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type activityUncheckedUpdateWithoutRegistrationInput = {
    id?: IntFieldUpdateOperationsInput | number
    kind?: Enumactivity_kindFieldUpdateOperationsInput | $Enums.activity_kind
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    capacity?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUpsertWithoutRegistrationInput = {
    update: XOR<userUpdateWithoutRegistrationInput, userUncheckedUpdateWithoutRegistrationInput>
    create: XOR<userCreateWithoutRegistrationInput, userUncheckedCreateWithoutRegistrationInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutRegistrationInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutRegistrationInput, userUncheckedUpdateWithoutRegistrationInput>
  }

  export type userUpdateWithoutRegistrationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: Enumuser_typeFieldUpdateOperationsInput | $Enums.user_type
    school?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type userUncheckedUpdateWithoutRegistrationInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    type?: Enumuser_typeFieldUpdateOperationsInput | $Enums.user_type
    school?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type registrationCreateWithoutUserInput = {
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
    attendance?: attendanceCreateNestedOneWithoutRegistrationInput
    activity: activityCreateNestedOneWithoutRegistrationInput
  }

  export type registrationUncheckedCreateWithoutUserInput = {
    id?: number
    activityId: number
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
    attendance?: attendanceUncheckedCreateNestedOneWithoutRegistrationInput
  }

  export type registrationCreateOrConnectWithoutUserInput = {
    where: registrationWhereUniqueInput
    create: XOR<registrationCreateWithoutUserInput, registrationUncheckedCreateWithoutUserInput>
  }

  export type registrationCreateManyUserInputEnvelope = {
    data: registrationCreateManyUserInput | registrationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type registrationUpsertWithWhereUniqueWithoutUserInput = {
    where: registrationWhereUniqueInput
    update: XOR<registrationUpdateWithoutUserInput, registrationUncheckedUpdateWithoutUserInput>
    create: XOR<registrationCreateWithoutUserInput, registrationUncheckedCreateWithoutUserInput>
  }

  export type registrationUpdateWithWhereUniqueWithoutUserInput = {
    where: registrationWhereUniqueInput
    data: XOR<registrationUpdateWithoutUserInput, registrationUncheckedUpdateWithoutUserInput>
  }

  export type registrationUpdateManyWithWhereWithoutUserInput = {
    where: registrationScalarWhereInput
    data: XOR<registrationUpdateManyMutationInput, registrationUncheckedUpdateManyWithoutUserInput>
  }

  export type registrationCreateManyActivityInput = {
    id?: number
    userId: number
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
  }

  export type registrationUpdateWithoutActivityInput = {
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: attendanceUpdateOneWithoutRegistrationNestedInput
    user?: userUpdateOneRequiredWithoutRegistrationNestedInput
  }

  export type registrationUncheckedUpdateWithoutActivityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: attendanceUncheckedUpdateOneWithoutRegistrationNestedInput
  }

  export type registrationUncheckedUpdateManyWithoutActivityInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type registrationCreateManyUserInput = {
    id?: number
    activityId: number
    qrCodePath?: string | null
    status?: $Enums.registration_status
    createdAt?: Date | string
  }

  export type registrationUpdateWithoutUserInput = {
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: attendanceUpdateOneWithoutRegistrationNestedInput
    activity?: activityUpdateOneRequiredWithoutRegistrationNestedInput
  }

  export type registrationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    attendance?: attendanceUncheckedUpdateOneWithoutRegistrationNestedInput
  }

  export type registrationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    qrCodePath?: NullableStringFieldUpdateOperationsInput | string | null
    status?: Enumregistration_statusFieldUpdateOperationsInput | $Enums.registration_status
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}